// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: candy-generator/src/main/java/org/jsweet/input/typescriptdef/parser/typescriptdef.lex

/* 
 * TypeScript definitions to Java translator - http://www.jsweet.org
 * Copyright (C) 2015 CINCHEO SAS <renaud.pawlak@cincheo.fr>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 
package org.jsweet.input.typescriptdef.parser;

import java_cup.runtime.*;
import org.jsweet.input.typescriptdef.ast.Token;
import java.util.*;


@SuppressWarnings("fallthrough")
class TypescriptDefScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int TYPE_MACRO = 6;
  public static final int EOL_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\36\u0100\1\u0400\u1001\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\11\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\6\33\21\7\1\34\2\7\1\35\1\36\1\37\1\0"+
    "\1\7\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\7\1\46\2\7\1\47\1\50\1\51\1\52\1\53"+
    "\1\7\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\7\1\64\1\65\1\66\1\67\6\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3\377\0\1\70";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\5\0\1\2\2\3\1\4\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\15\1\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\37\1\41"+
    "\1\2\1\42\3\36\2\43\13\0\1\33\1\44\1\45"+
    "\5\0\1\46\2\20\1\47\1\50\1\0\1\51\1\1"+
    "\1\52\1\53\1\54\1\55\1\0\1\56\24\1\1\0"+
    "\2\33\1\57\1\60\1\41\1\61\1\62\1\63\1\64"+
    "\15\0\1\65\1\66\2\0\1\20\1\1\1\0\12\1"+
    "\1\0\1\1\1\67\6\1\14\0\1\70\3\0\1\71"+
    "\1\1\1\72\13\1\1\73\1\0\6\1\3\0\1\74"+
    "\6\0\1\71\4\0\4\1\1\0\2\1\1\0\4\1"+
    "\1\75\6\1\10\0\1\76\2\0\1\1\2\0\1\1"+
    "\1\77\2\1\1\100\12\1\5\0\1\101\1\1\1\102"+
    "\1\103\1\1\2\0\1\104\3\1\1\0\1\105\3\1"+
    "\1\0\1\1\6\0\1\1\2\0\5\1\2\0\1\106"+
    "\3\1\1\0\1\1\1\107\1\1\1\110\1\111\3\0"+
    "\6\112\5\0\5\1\3\0\2\1\1\113\1\1\3\0"+
    "\1\114\5\0\5\1\2\0\1\115\1\1\2\0\1\116"+
    "\7\0\1\1\1\117\3\1\2\0\1\120\1\121\3\0"+
    "\1\117\3\0\1\122\3\1\1\123\1\0\1\124\1\122"+
    "\3\0\1\1\1\125\1\1\1\126\1\0\1\125\1\0"+
    "\2\1\2\0\2\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u0201\0\u02e5\0\u031e"+
    "\0\u0201\0\u0357\0\u0390\0\u0201\0\u03c9\0\u0201\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u0201\0\u0201\0\u051f\0\u0558\0\u0591"+
    "\0\u0201\0\u0201\0\u05ca\0\u0201\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u0201\0\u08e8\0\u0201\0\u0201\0\u0201\0\u0921\0\u0201"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0201\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u023a\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0201\0\u0201"+
    "\0\u0357\0\u0dce\0\u0e07\0\u0390\0\u0e40\0\u0201\0\u0201\0\u0e79"+
    "\0\u0201\0\u0eb2\0\u0eeb\0\u0201\0\u0f24\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u05ca\0\u0201\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u0201\0\u140a\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u0bcd\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u0201\0\u0201"+
    "\0\u16ef\0\u1728\0\u0f24\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u02e5\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u0201\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u0201\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u0201\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u0201\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u0201\0\u25a1\0\u25da\0\u1f2c\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u0201\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u0201\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u0201\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u0201"+
    "\0\u2d33\0\u2d6c\0\u0201\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u0201\0\u30fc\0\u0201\0\u0201\0\u3135\0\u316e"+
    "\0\u31a7\0\u0201\0\u31e0\0\u3219\0\u3252\0\u328b\0\u0201\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u0201\0\u3771\0\u37aa\0\u37e3"+
    "\0\u381c\0\u3855\0\u0201\0\u388e\0\u0201\0\u0201\0\u38c7\0\u3900"+
    "\0\u3939\0\u0201\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3972"+
    "\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a"+
    "\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u0201\0\u3cc9"+
    "\0\u3d02\0\u3d3b\0\u3d74\0\u0201\0\u3dad\0\u3de6\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020"+
    "\0\u0201\0\u4059\0\u4092\0\u40cb\0\u0201\0\u4104\0\u413d\0\u4176"+
    "\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u02e5\0\u42cc\0\u4305"+
    "\0\u433e\0\u4377\0\u43b0\0\u0201\0\u0201\0\u43e9\0\u4422\0\u445b"+
    "\0\u0201\0\u4494\0\u44cd\0\u4506\0\u02e5\0\u453f\0\u4578\0\u45b1"+
    "\0\u0201\0\u45ea\0\u0201\0\u0201\0\u4623\0\u465c\0\u4695\0\u46ce"+
    "\0\u02e5\0\u4707\0\u0201\0\u4740\0\u0201\0\u4779\0\u47b2\0\u47eb"+
    "\0\u4824\0\u485d\0\u02e5\0\u0201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\12\1\13\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\2\17\1\43\1\12\1\44\1\45\1\17"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\17\1\54"+
    "\1\17\1\55\1\56\1\57\1\60\1\17\1\61\3\17"+
    "\1\62\1\63\1\64\1\65\1\66\2\67\1\66\1\67"+
    "\1\0\1\67\1\70\27\67\1\71\32\67\2\72\1\66"+
    "\1\72\1\0\4\72\1\70\24\72\1\73\32\72\1\66"+
    "\1\74\1\75\1\0\1\75\36\66\1\76\1\77\11\66"+
    "\1\100\12\66\2\12\1\101\1\12\1\102\64\12\2\0"+
    "\1\103\1\0\1\104\72\0\2\105\1\0\1\105\7\0"+
    "\3\105\7\0\2\105\3\0\24\105\7\0\1\106\1\0"+
    "\1\107\66\0\1\110\1\0\1\111\156\0\1\112\22\0"+
    "\1\34\16\0\1\113\1\114\11\0\1\115\6\0\1\116"+
    "\4\0\1\112\1\13\21\0\1\34\16\0\1\113\1\114"+
    "\11\0\1\115\6\0\1\116\32\0\1\117\50\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\24\17\15\0\1\120"+
    "\60\0\12\121\1\122\1\123\55\121\1\0\1\124\25\0"+
    "\1\125\56\0\1\126\4\0\1\127\1\130\64\0\1\131"+
    "\2\0\1\127\1\130\65\0\1\132\64\0\1\133\4\0"+
    "\1\134\56\0\1\17\12\0\2\17\7\0\1\17\1\135"+
    "\3\0\22\17\1\135\1\17\14\0\1\17\12\0\2\33"+
    "\7\0\2\17\3\0\24\17\34\0\1\136\70\0\1\137"+
    "\1\140\67\0\1\141\42\0\1\142\35\0\1\143\40\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\1\17\1\144"+
    "\13\17\1\145\6\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\7\17\1\146\2\17\1\147\11\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\4\17\1\150"+
    "\17\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\11\17\1\151\10\17\1\152\1\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\14\17\1\153\2\17\1\154"+
    "\4\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\10\17\1\155\1\156\3\17\1\157\6\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\4\17\1\160\17\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\4\17"+
    "\1\161\17\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\14\17\1\162\2\17\1\163\4\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\4\17\1\164\17\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\16\17"+
    "\1\165\5\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\23\17\1\166\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\1\167\23\17\6\0\1\170\1\171\1\0"+
    "\1\172\60\0\1\173\3\0\2\67\1\0\1\67\1\0"+
    "\1\67\1\0\27\67\1\0\32\67\6\0\1\174\27\0"+
    "\1\175\12\0\1\176\2\0\1\177\1\0\1\200\12\0"+
    "\2\72\1\0\1\72\1\0\4\72\1\0\24\72\1\0"+
    "\32\72\11\0\1\201\24\0\1\175\12\0\1\176\2\0"+
    "\1\177\1\0\1\200\13\0\1\74\70\0\2\75\1\0"+
    "\1\75\14\0\1\202\113\0\1\203\106\0\1\204\71\0"+
    "\1\205\7\0\1\101\67\0\1\103\54\0\1\206\13\0"+
    "\2\103\53\0\1\206\13\0\1\207\70\0\1\106\42\0"+
    "\1\210\25\0\2\106\41\0\1\210\25\0\1\110\41\0"+
    "\1\211\26\0\2\110\40\0\1\211\71\0\1\212\106\0"+
    "\1\213\71\0\1\214\6\0\1\116\1\171\1\0\1\172"+
    "\64\0\12\122\1\215\1\121\55\122\1\0\1\123\25\0"+
    "\1\216\71\0\1\217\62\0\2\130\65\0\1\220\50\0"+
    "\14\221\1\222\54\221\7\0\1\17\12\0\2\223\7\0"+
    "\1\223\1\17\3\0\6\223\16\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\15\17\1\224\6\17\6\0"+
    "\1\225\5\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\24\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\1\226\23\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\11\17\1\227\12\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\2\17\1\230\21\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\17\17\1\231\4\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\13\17"+
    "\1\232\2\17\1\233\5\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\12\17\1\234\11\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\11\17\1\235\12\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\13\17"+
    "\1\236\10\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\16\17\1\237\5\17\6\0\1\240\5\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\24\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\16\17\1\241\5\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\21\17"+
    "\1\242\2\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\6\17\1\243\3\17\1\244\11\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\1\17\1\245\22\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\1\246"+
    "\23\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\1\247\23\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\13\17\1\250\10\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\14\17\1\241\7\17\6\0\1\170"+
    "\1\171\1\0\1\172\66\0\1\171\102\0\1\251\4\0"+
    "\1\252\111\0\1\253\101\0\1\254\70\0\1\255\100\0"+
    "\1\256\67\0\1\257\52\0\1\260\66\0\1\261\101\0"+
    "\1\262\70\0\1\263\15\0\12\215\1\264\1\122\55\215"+
    "\30\0\1\265\40\0\14\221\1\266\54\221\14\267\1\270"+
    "\4\267\1\271\47\267\7\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\16\17\1\272\5\17\6\0\1\225\4\0"+
    "\2\273\1\0\1\273\7\0\3\273\7\0\2\273\3\0"+
    "\24\273\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\15\17\1\274\6\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\15\17\1\275\6\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\7\17\1\276\14\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\10\17\1\277"+
    "\13\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\12\17\1\300\11\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\4\17\1\301\17\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\10\17\1\302\13\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\2\17\1\303"+
    "\21\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\7\17\1\304\2\17\1\305\11\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\4\17\1\306\17\17\6\0"+
    "\1\240\4\0\2\307\1\0\1\307\7\0\3\307\7\0"+
    "\2\307\3\0\24\307\6\0\1\310\5\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\24\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\20\17\1\311\3\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\16\17\1\312"+
    "\5\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\7\17\1\313\14\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\3\17\1\314\20\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\16\17\1\315\5\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\4\17\1\316"+
    "\17\17\5\0\14\251\1\317\54\251\2\252\1\75\1\252"+
    "\1\75\64\252\47\0\1\320\73\0\1\321\62\0\1\322"+
    "\77\0\1\323\70\0\1\324\57\0\1\325\75\0\1\326"+
    "\73\0\1\327\62\0\1\330\24\0\12\264\1\0\1\215"+
    "\55\264\14\221\1\266\4\221\1\331\47\221\14\267\1\332"+
    "\54\267\14\333\1\270\4\333\1\331\47\333\14\334\1\335"+
    "\54\334\7\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\14\17\1\336\7\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\15\17\1\337\6\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\16\17\1\340\5\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\1\341\23\17"+
    "\6\0\1\342\5\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\24\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\14\17\1\343\7\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\11\17\1\344\12\17\6\0\1\345"+
    "\5\0\1\17\12\0\2\17\7\0\2\17\3\0\24\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\16\17"+
    "\1\346\5\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\4\17\1\347\17\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\14\17\1\350\7\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\14\17\1\351\7\17"+
    "\6\0\1\310\4\0\2\352\1\0\1\352\7\0\3\352"+
    "\7\0\2\352\3\0\24\352\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\1\353\23\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\4\17\1\354\17\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\6\17\1\355"+
    "\15\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\12\17\1\356\11\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\6\17\1\357\15\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\12\17\1\360\11\17\5\0"+
    "\14\251\1\317\4\251\1\75\47\251\40\0\1\361\104\0"+
    "\1\362\60\0\1\363\76\0\1\364\65\0\1\365\61\0"+
    "\1\366\104\0\1\367\15\0\1\370\67\0\14\333\1\270"+
    "\4\333\1\371\47\333\14\267\1\270\54\267\14\372\1\373"+
    "\4\372\1\371\47\372\7\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\1\374\23\17\6\0\1\375\5\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\24\17\6\0\1\376"+
    "\5\0\1\17\12\0\2\17\7\0\2\17\3\0\24\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\14\17"+
    "\1\377\7\17\6\0\1\342\4\0\2\u0100\1\0\1\u0100"+
    "\7\0\3\u0100\7\0\2\u0100\3\0\24\u0100\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\16\17\1\u0101\5\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\3\17"+
    "\1\u0102\20\17\6\0\1\345\4\0\2\u0103\1\0\1\u0103"+
    "\7\0\3\u0103\7\0\2\u0103\3\0\24\u0103\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\6\17\1\u0104\15\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\10\17"+
    "\1\u0105\13\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\16\17\1\u0106\5\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\5\17\1\u0107\16\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\16\17\1\u0108\5\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\2\17"+
    "\1\u0109\21\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\2\17\1\u010a\21\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\11\17\1\u010b\12\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\2\17\1\u010c\21\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\5\17"+
    "\1\u010d\16\17\61\0\1\u010e\72\0\1\12\66\0\1\u010f"+
    "\54\0\1\u0110\104\0\1\u0111\72\0\1\u0112\13\0\1\370"+
    "\4\0\2\u0113\1\0\1\u0113\7\0\3\u0113\7\0\2\u0113"+
    "\3\0\24\u0113\5\0\14\334\1\373\54\334\14\372\1\373"+
    "\4\372\1\0\47\372\7\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\2\17\1\u0114\21\17\6\0\1\375\4\0"+
    "\2\u0115\1\0\1\u0115\7\0\3\u0115\7\0\2\u0115\3\0"+
    "\24\u0115\6\0\1\376\4\0\2\u0116\1\0\1\u0116\7\0"+
    "\3\u0116\7\0\2\u0116\3\0\24\u0116\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\4\17\1\u0117\17\17\6\0"+
    "\1\u0118\1\u0119\1\0\1\u0119\2\0\1\17\12\0\2\17"+
    "\3\0\1\u011a\3\0\2\17\3\0\24\17\1\u011a\13\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\15\17\1\u011b"+
    "\6\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\12\17\1\u011c\11\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\4\17\1\u011d\17\17\6\0\1\u011e\5\0"+
    "\1\17\4\0\1\u011f\5\0\2\17\7\0\2\17\3\0"+
    "\24\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\1\u0120\23\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\4\17\1\u0121\17\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\16\17\1\u0122\5\17\6\0\1\u0123"+
    "\5\0\1\17\12\0\2\17\7\0\2\17\3\0\24\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\7\17"+
    "\1\u0124\14\17\6\0\1\u0125\5\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\24\17\6\0\1\u0126\5\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\24\17\51\0\1\12"+
    "\102\0\1\u0127\66\0\1\u0128\60\0\1\u0129\25\0\2\u0112"+
    "\1\0\1\u0112\51\0\1\u012a\21\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\16\17\1\u012b\5\17\6\0\1\u012c"+
    "\1\u012d\1\0\1\u012d\2\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\2\17\1\u012e\1\17\1\u012f\1\u0130\2\17"+
    "\1\u0131\1\u0132\12\17\6\0\1\u0118\1\u0119\1\0\1\u0119"+
    "\1\0\2\u011a\1\0\1\u011a\7\0\3\u011a\3\0\1\u011a"+
    "\3\0\2\u011a\3\0\25\u011a\5\0\2\u0119\1\0\1\u0119"+
    "\22\0\1\u011a\34\0\1\u011a\5\0\1\u0133\5\0\1\17"+
    "\2\0\1\u0134\7\0\2\17\7\0\2\17\3\0\24\17"+
    "\1\u0135\13\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\11\17\1\u0136\12\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\11\17\1\u0137\12\17\6\0\1\u011e\4\0"+
    "\2\u011f\1\0\1\u011f\2\0\1\u011f\4\0\3\u011f\7\0"+
    "\2\u011f\3\0\24\u011f\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\2\17\1\u0138\21\17\6\0\1\u0139\5\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\24\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\4\17\1\u013a"+
    "\17\17\6\0\1\u0123\4\0\2\u013b\1\0\1\u013b\7\0"+
    "\3\u013b\7\0\2\u013b\3\0\24\u013b\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\23\17\1\u013c\6\0\1\u0125"+
    "\4\0\2\u013d\1\0\1\u013d\7\0\3\u013d\7\0\2\u013d"+
    "\3\0\24\u013d\6\0\1\u0126\4\0\2\u013e\1\0\1\u013e"+
    "\7\0\3\u013e\7\0\2\u013e\3\0\24\u013e\6\0\2\u0127"+
    "\1\0\1\u0127\51\0\1\206\56\0\1\u0127\25\0\2\u0129"+
    "\1\0\1\u0129\51\0\1\u013f\75\0\1\u0140\6\0\1\u0141"+
    "\5\0\1\17\12\0\2\17\7\0\2\17\3\0\24\17"+
    "\6\0\1\u012c\1\u012d\1\0\1\u012d\1\0\2\u0142\1\0"+
    "\1\u0142\7\0\3\u0142\7\0\2\u0142\3\0\2\u0142\1\u0143"+
    "\1\u0142\1\u0144\1\u0145\2\u0142\1\u0146\1\u0147\12\u0142\6\0"+
    "\2\u012d\1\0\1\u012d\35\0\1\u0148\1\0\1\u0149\1\u014a"+
    "\2\0\1\u014b\1\u014c\26\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\7\17\1\u014d\14\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\11\17\1\u014e\12\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\17\17\1\u014f"+
    "\4\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\12\17\1\u0150\11\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\1\u0151\23\17\6\0\1\u0133\4\0\2\u0135"+
    "\1\0\1\u0135\1\u0134\6\0\3\u0135\7\0\2\u0135\3\0"+
    "\25\u0135\4\0\12\u0134\1\u0152\1\u0153\55\u0134\1\0\1\u0154"+
    "\5\0\1\17\12\0\2\17\7\0\2\17\3\0\24\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\16\17"+
    "\1\u0155\5\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\4\17\1\u0156\17\17\6\0\1\u0139\4\0\2\u0157"+
    "\1\0\1\u0157\7\0\3\u0157\7\0\2\u0157\3\0\24\u0157"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\3\17"+
    "\1\u0158\20\17\6\0\1\u0159\5\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\24\17\70\0\1\u015a\60\0\1\u015b"+
    "\16\0\1\u0141\4\0\2\u015c\1\0\1\u015c\7\0\3\u015c"+
    "\7\0\2\u015c\3\0\24\u015c\54\0\1\u015d\72\0\1\u015e"+
    "\76\0\1\u015f\63\0\1\u0160\56\0\1\u0161\37\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\1\u0162\23\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\17\17\1\u0163"+
    "\4\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\11\17\1\u0164\12\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\3\17\1\u0165\20\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\10\17\1\u0166\13\17\5\0"+
    "\12\u0152\1\u0167\1\u0134\55\u0152\1\0\1\u0153\25\0\1\u0168"+
    "\42\0\1\u0154\4\0\2\u0169\1\0\1\u0169\7\0\3\u0169"+
    "\7\0\2\u0169\3\0\24\u0169\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\15\17\1\u016a\6\17\6\0\1\u016b"+
    "\5\0\1\17\12\0\2\17\7\0\2\17\3\0\24\17"+
    "\6\0\1\u016c\5\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\24\17\6\0\1\u0159\4\0\2\u016d\1\0\1\u016d"+
    "\7\0\3\u016d\7\0\3\u016d\2\0\24\u016d\60\0\1\u016e"+
    "\61\0\1\u016f\64\0\1\u0170\107\0\1\u0171\62\0\1\u0172"+
    "\62\0\1\u0173\75\0\1\u0174\27\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\15\17\1\u0175\6\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\10\17\1\u0176\13\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\2\17"+
    "\1\u0177\21\17\14\0\1\17\12\0\2\17\7\0\2\17"+
    "\3\0\17\17\1\u0178\4\17\14\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\4\17\1\u0179\17\17\5\0\12\u0167"+
    "\1\u017a\1\u0152\55\u0167\30\0\1\u0135\41\0\1\u017b\5\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\24\17\6\0"+
    "\1\u016b\4\0\2\u017c\1\0\1\u017c\7\0\3\u017c\7\0"+
    "\2\u017c\3\0\24\u017c\6\0\1\u016c\4\0\2\u017d\1\0"+
    "\1\u017d\7\0\3\u017d\7\0\2\u017d\3\0\24\u017d\51\0"+
    "\1\u017e\25\0\1\u017f\144\0\1\u0180\63\0\1\u0181\62\0"+
    "\1\u0182\105\0\1\u0183\55\0\1\u0184\33\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\15\17\1\u0185\6\17\14\0"+
    "\1\17\12\0\2\17\7\0\2\17\3\0\16\17\1\u0186"+
    "\5\17\14\0\1\17\12\0\2\17\7\0\2\17\3\0"+
    "\7\17\1\u0187\14\17\14\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\15\17\1\u0188\6\17\5\0\12\u017a\1\0"+
    "\1\u0167\55\u017a\1\0\1\u017b\4\0\2\u0189\1\0\1\u0189"+
    "\7\0\3\u0189\7\0\2\u0189\3\0\24\u0189\6\0\1\u018a"+
    "\70\0\1\u017f\4\0\2\u018b\1\0\1\u018b\7\0\3\u018b"+
    "\7\0\2\u018b\3\0\24\u018b\62\0\1\u018c\71\0\1\u018d"+
    "\61\0\1\u018e\76\0\1\u018f\22\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\6\17\1\u0190\15\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\4\17\1\u0191\17\17"+
    "\14\0\1\17\12\0\2\17\7\0\2\17\3\0\13\17"+
    "\1\u0192\10\17\6\0\1\u018a\4\0\2\u0193\1\0\1\u0193"+
    "\7\0\3\u0193\7\0\2\u0193\3\0\24\u0193\53\0\1\u0194"+
    "\66\0\1\u0195\77\0\1\u0196\24\0\1\17\12\0\2\17"+
    "\7\0\2\17\3\0\12\17\1\u0197\11\17\14\0\1\17"+
    "\12\0\2\17\7\0\2\17\3\0\1\u0198\23\17\57\0"+
    "\1\u0199\56\0\1\u019a\37\0\1\17\12\0\2\17\7\0"+
    "\2\17\3\0\11\17\1\u019b\12\17\14\0\1\17\12\0"+
    "\2\17\7\0\2\17\3\0\2\17\1\u0187\21\17\56\0"+
    "\1\u019c\61\0\1\u018e\26\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18582];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\1\5\0\1\11\3\1\1\11\2\1"+
    "\1\11\2\1\1\11\1\1\1\11\5\1\2\11\3\1"+
    "\2\11\1\1\1\11\15\1\1\11\1\1\3\11\1\1"+
    "\1\11\10\1\1\11\1\1\13\0\1\1\2\11\5\0"+
    "\2\11\1\1\1\11\1\1\1\0\1\11\1\1\4\11"+
    "\1\0\1\11\24\1\1\0\1\11\1\1\7\11\5\0"+
    "\1\1\7\0\2\11\2\0\2\1\1\0\12\1\1\0"+
    "\10\1\14\0\1\11\3\0\2\1\1\11\13\1\1\11"+
    "\1\0\6\1\3\0\1\11\6\0\1\11\4\0\4\1"+
    "\1\0\2\1\1\0\4\1\1\11\6\1\2\0\1\11"+
    "\5\0\1\11\2\0\1\1\2\0\1\1\1\11\2\1"+
    "\1\11\12\1\5\0\1\11\1\1\2\11\1\1\2\0"+
    "\1\11\3\1\1\0\1\11\3\1\1\0\1\1\6\0"+
    "\1\1\2\0\5\1\2\0\1\11\3\1\1\0\1\1"+
    "\1\11\1\1\2\11\3\0\1\11\5\1\5\0\5\1"+
    "\3\0\2\1\1\11\1\1\3\0\1\11\5\0\5\1"+
    "\2\0\1\11\1\1\2\0\1\11\7\0\5\1\2\0"+
    "\2\11\3\0\1\11\3\0\4\1\1\11\1\0\2\11"+
    "\3\0\3\1\1\11\1\0\1\11\1\0\2\1\2\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string=new StringBuffer();
	String fileName;
	public void setFileName(String name) {
		fileName=name;
	}
	public String getFileName() {
		return fileName;
	}
	private Symbol symbol(int type) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,yytext(),
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Symbol symbol(int type, String value) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,value,
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Stack<Symbol> openParens = new Stack<Symbol>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypescriptDefScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              yybegin(YYINITIAL);
            }  // fall though
            case 413: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.IDENTIFIER);
            }
          // fall through
          case 88: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 89: break;
          case 3:
            { /*System.err.println("LF");*/  return symbol(sym.LF);
            }
          // fall through
          case 90: break;
          case 4:
            { return symbol(sym.NOT);
            }
          // fall through
          case 91: break;
          case 5:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 92: break;
          case 6:
            { return symbol(sym.AND);
            }
          // fall through
          case 93: break;
          case 7:
            { string.setLength(0); yybegin(CHAR);
            }
          // fall through
          case 94: break;
          case 8:
            { return symbol(sym.LPAREN);
            }
          // fall through
          case 95: break;
          case 9:
            { return symbol(sym.RPAREN);
            }
          // fall through
          case 96: break;
          case 10:
            { return symbol(sym.MULT);
            }
          // fall through
          case 97: break;
          case 11:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 98: break;
          case 12:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 99: break;
          case 13:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 100: break;
          case 14:
            { return symbol(sym.DOT);
            }
          // fall through
          case 101: break;
          case 15:
            { return symbol(sym.DIV);
            }
          // fall through
          case 102: break;
          case 16:
            { return symbol(sym.INT);
            }
          // fall through
          case 103: break;
          case 17:
            { return symbol(sym.COL);
            }
          // fall through
          case 104: break;
          case 18:
            { return symbol(sym.SEMI);
            }
          // fall through
          case 105: break;
          case 19:
            { return symbol(sym.LT);
            }
          // fall through
          case 106: break;
          case 20:
            { return symbol(sym.ASSIGN);
            }
          // fall through
          case 107: break;
          case 21:
            { return symbol(sym.GT);
            }
          // fall through
          case 108: break;
          case 22:
            { return symbol(sym.QUESTION);
            }
          // fall through
          case 109: break;
          case 23:
            { return symbol(sym.AT);
            }
          // fall through
          case 110: break;
          case 24:
            { return symbol(sym.LSPAREN);
            }
          // fall through
          case 111: break;
          case 25:
            { return symbol(sym.RSPAREN);
            }
          // fall through
          case 112: break;
          case 26:
            { return symbol(sym.LCPAREN);
            }
          // fall through
          case 113: break;
          case 27:
            { return symbol(sym.TUBE);
            }
          // fall through
          case 114: break;
          case 28:
            { return symbol(sym.RCPAREN);
            }
          // fall through
          case 115: break;
          case 29:
            { return symbol(sym.MATCHES);
            }
          // fall through
          case 116: break;
          case 30:
            { System.out.println("unmatched:"+yytext());
            }
          // fall through
          case 117: break;
          case 31:
            { string.append( yytext() );
            }
          // fall through
          case 118: break;
          case 32:
            { yybegin(YYINITIAL); 
                          return symbol(sym.IDENTIFIER, 
                          "\""+string.toString()+"\"");
            }
          // fall through
          case 119: break;
          case 33:
            { string.append('\\');
            }
          // fall through
          case 120: break;
          case 34:
            { return symbol(sym.LF);
            }
          // fall through
          case 121: break;
          case 35:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 122: break;
          case 36:
            { return symbol(sym.NOTEQUALS);
            }
          // fall through
          case 123: break;
          case 37:
            { return symbol(sym.ANDAND);
            }
          // fall through
          case 124: break;
          case 38:
            { return symbol(sym.PLUSPLUS);
            }
          // fall through
          case 125: break;
          case 39:
            { return symbol(sym.MINUSMINUS);
            }
          // fall through
          case 126: break;
          case 40:
            { return symbol(sym.DOTDOT);
            }
          // fall through
          case 127: break;
          case 41:
            { yybegin(EOL_COMMENT);
            }
          // fall through
          case 128: break;
          case 42:
            { return symbol(sym.LTE);
            }
          // fall through
          case 129: break;
          case 43:
            { return symbol(sym.EQUALS);
            }
          // fall through
          case 130: break;
          case 44:
            { return symbol(sym.IMPLIES);
            }
          // fall through
          case 131: break;
          case 45:
            { return symbol(sym.GTE);
            }
          // fall through
          case 132: break;
          case 46:
            { return symbol(sym.SQUARE);
            }
          // fall through
          case 133: break;
          case 47:
            { return symbol(sym.OROR);
            }
          // fall through
          case 134: break;
          case 48:
            { string.append('\"');
            }
          // fall through
          case 135: break;
          case 49:
            { string.append('\n');
            }
          // fall through
          case 136: break;
          case 50:
            { string.append('\r');
            }
          // fall through
          case 137: break;
          case 51:
            { string.append('\t');
            }
          // fall through
          case 138: break;
          case 52:
            { string.append('\'');
            }
          // fall through
          case 139: break;
          case 53:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { return symbol(sym.RPAREN_FUNC);
            }
          // fall through
          case 140: break;
          case 54:
            { return symbol(sym.DOTDOTDOT);
            }
          // fall through
          case 141: break;
          case 55:
            { return symbol(sym.NEW);
            }
          // fall through
          case 142: break;
          case 56:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { return symbol(sym.LPAREN_FUNC);
            }
          // fall through
          case 143: break;
          case 57:
            { /*System.err.println("COMMENT: "+yytext());*/ /* ignore */
            }
          // fall through
          case 144: break;
          case 58:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(sym.AS);
            }
          // fall through
          case 145: break;
          case 59:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(sym.IS);
            }
          // fall through
          case 146: break;
          case 60:
            { yybegin(YYINITIAL); return symbol(sym.TYPE_MACRO);
            }
          // fall through
          case 147: break;
          case 61:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(sym.VAR);
            }
          // fall through
          case 148: break;
          case 62:
            { return symbol(sym.DOC);
            }
          // fall through
          case 149: break;
          case 63:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(sym.ENUM);
            }
          // fall through
          case 150: break;
          case 64:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(sym.FROM);
            }
          // fall through
          case 151: break;
          case 65:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 5;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(yylength()); yybegin(TYPE_MACRO);
            }
          // fall through
          case 152: break;
          case 66:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(sym.CLASS);
            }
          // fall through
          case 153: break;
          case 67:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(sym.CONST);
            }
          // fall through
          case 154: break;
          case 68:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(sym.EXPORT);
            }
          // fall through
          case 155: break;
          case 69:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(sym.IMPORT);
            }
          // fall through
          case 156: break;
          case 70:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return symbol(sym.EXTENDS);
            }
          // fall through
          case 157: break;
          case 71:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(sym.PUBLIC);
            }
          // fall through
          case 158: break;
          case 72:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(sym.STATIC);
            }
          // fall through
          case 159: break;
          case 73:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(sym.TYPEOF);
            }
          // fall through
          case 160: break;
          case 74:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return symbol(sym.DECLARE);
            }
          // fall through
          case 161: break;
          case 75:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return symbol(sym.PRIVATE);
            }
          // fall through
          case 162: break;
          case 76:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return symbol(sym.ABSTRACT);
            }
          // fall through
          case 163: break;
          case 77:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 164: break;
          case 78:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return symbol(sym.CONST);
            }
          // fall through
          case 165: break;
          case 79:
            { return symbol(sym.DECLARE_ENUM);
            }
          // fall through
          case 166: break;
          case 80:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { return symbol(sym.INTERFACE);
            }
          // fall through
          case 167: break;
          case 81:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { return symbol(sym.PROTECTED);
            }
          // fall through
          case 168: break;
          case 82:
            { return symbol(sym.DECLARE_CLASS);
            }
          // fall through
          case 169: break;
          case 83:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 10);
            { return symbol(sym.IMPLEMENTS);
            }
          // fall through
          case 170: break;
          case 84:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 7;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(yylength()); yybegin(TYPE_MACRO);
            }
          // fall through
          case 171: break;
          case 85:
            { return symbol(sym.DECLARE_MODULE);
            }
          // fall through
          case 172: break;
          case 86:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(yylength()); yybegin(TYPE_MACRO);
            }
          // fall through
          case 173: break;
          case 87:
            { return symbol(sym.DECLARE_FUNCTION);
            }
          // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
