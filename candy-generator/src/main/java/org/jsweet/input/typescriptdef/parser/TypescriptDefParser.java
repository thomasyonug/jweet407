
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.jsweet.input.typescriptdef.parser;

import java.util.*;
import java.io.*;
import org.apache.commons.lang3.*;
import org.jsweet.input.typescriptdef.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TypescriptDefParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public TypescriptDefParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TypescriptDefParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TypescriptDefParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\020\006" +
    "\000\002\020\007\000\002\112\006\000\002\112\003\000" +
    "\002\113\003\000\002\113\005\000\002\107\003\000\002" +
    "\107\002\000\002\021\005\000\002\064\007\000\002\064" +
    "\005\000\002\064\010\000\002\010\010\000\002\010\010" +
    "\000\002\011\015\000\002\011\014\000\002\062\003\000" +
    "\002\062\002\000\002\111\003\000\002\111\002\000\002" +
    "\034\012\000\002\034\013\000\002\036\005\000\002\036" +
    "\003\000\002\035\006\000\002\035\003\000\002\035\005" +
    "\000\002\035\006\000\002\035\007\000\002\037\003\000" +
    "\002\037\003\000\002\040\005\000\002\040\003\000\002" +
    "\041\003\000\002\041\005\000\002\106\003\000\002\012" +
    "\003\000\002\012\003\000\002\073\004\000\002\073\002" +
    "\000\002\074\005\000\002\074\002\000\002\103\006\000" +
    "\002\103\003\000\002\027\005\000\002\027\003\000\002" +
    "\075\004\000\002\075\003\000\002\100\003\000\002\100" +
    "\002\000\002\076\004\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\077\002\000\002\101\004\000" +
    "\002\101\003\000\002\101\004\000\002\101\003\000\002" +
    "\101\003\000\002\102\003\000\002\102\002\000\002\030" +
    "\005\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\104\005\000" +
    "\002\104\004\000\002\105\003\000\002\105\002\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\014\011\000\002\014\010\000\002\110\003" +
    "\000\002\110\003\000\002\013\010\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\025\003\000\002" +
    "\025\002\000\002\015\012\000\002\015\013\000\002\015" +
    "\012\000\002\016\010\000\002\016\011\000\002\017\011" +
    "\000\002\017\012\000\002\017\014\000\002\017\011\000" +
    "\002\022\005\000\002\022\003\000\002\023\007\000\002" +
    "\023\003\000\002\024\012\000\002\026\003\000\002\026" +
    "\002\000\002\042\003\000\002\042\002\000\002\043\007" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\046" +
    "\006\000\002\046\005\000\002\047\006\000\002\047\005" +
    "\000\002\053\004\000\002\057\005\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\006\000\002" +
    "\050\004\000\002\050\006\000\002\051\010\000\002\051" +
    "\011\000\002\051\005\000\002\054\005\000\002\054\005" +
    "\000\002\055\004\000\002\055\006\000\002\056\005\000" +
    "\002\056\007\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\004\000\002\060\004\000\002\060\003\000\002\060\004" +
    "\000\002\060\002\000\002\063\003\000\002\063\005\000" +
    "\002\070\005\000\002\070\002\000\002\071\005\000\002" +
    "\071\003\000\002\065\005\000\002\065\002\000\002\066" +
    "\005\000\002\066\003\000\002\067\003\000\002\067\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\066\002\uffbe\003\uffbe\036\uffbe\051\uffbe\055" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\102\uffbe\103\uffbe\105\uffbe" +
    "\111\uffbe\112\006\001\002\000\004\002\000\001\002\000" +
    "\122\002\uffbf\003\uffbf\004\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\036\uffbf\051\uffbf\055\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\111\uffbf\112\261\113" +
    "\uffbf\114\uffbf\001\002\000\122\002\uffc0\003\uffc0\004\uffc0" +
    "\005\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\021\uffc0\036\uffc0\051\uffc0\055\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\102\uffc0\103\uffc0\104\uffc0\105" +
    "\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0\001\002\000\004" +
    "\002\u0167\001\002\000\066\002\ufffe\003\033\015\ufffe\036" +
    "\015\051\uff5f\055\uff5f\060\uffe8\061\035\062\uff5f\063\020" +
    "\064\031\065\024\066\uff5f\067\041\070\023\071\036\072" +
    "\uff5f\073\uff5f\074\032\075\uff5f\076\uff5f\077\uff5f\102\uff5f" +
    "\103\026\105\uff5f\111\uff5f\001\002\000\012\002\ufff4\011" +
    "\ufff4\015\ufff4\112\ufff4\001\002\000\012\002\ufffb\011\ufffb" +
    "\015\ufffb\112\ufffb\001\002\000\004\060\u0159\001\002\000" +
    "\012\002\ufff7\011\ufff7\015\ufff7\112\ufff7\001\002\000\012" +
    "\002\ufff8\011\ufff8\015\ufff8\112\ufff8\001\002\000\012\002" +
    "\ufff5\011\ufff5\015\ufff5\112\ufff5\001\002\000\012\002\ufff6" +
    "\011\ufff6\015\ufff6\112\ufff6\001\002\000\044\012\uff65\016" +
    "\uff65\021\uff65\036\uff65\051\uff65\055\uff65\062\uff65\066\uff65" +
    "\072\uff65\073\uff65\075\uff65\076\uff65\077\uff65\102\uff65\103" +
    "\u0158\105\uff65\111\uff65\001\002\000\012\002\ufff9\011\ufff9" +
    "\015\ufff9\112\ufff9\001\002\000\012\002\ufff0\011\ufff0\015" +
    "\ufff0\112\ufff0\001\002\000\004\055\302\001\002\000\044" +
    "\012\uff61\016\uff61\021\uff61\036\uff61\051\uff61\055\uff61\062" +
    "\uff61\066\uff61\072\uff61\073\uff61\075\uff61\076\uff61\077\uff61" +
    "\102\uff61\103\u0152\105\uff61\111\uff61\001\002\000\012\002" +
    "\ufff3\011\ufff3\015\ufff3\112\ufff3\001\002\000\042\012\uff66" +
    "\016\uff66\021\uff66\036\uff66\051\uff66\055\uff66\062\uff66\066" +
    "\uff66\072\uff66\073\uff66\075\uff66\076\uff66\077\uff66\102\uff66" +
    "\105\uff66\111\uff66\001\002\000\012\002\ufff1\011\ufff1\015" +
    "\ufff1\112\ufff1\001\002\000\012\002\uffb9\011\u014f\015\uffb9" +
    "\112\006\001\002\000\044\012\uff64\016\uff64\021\uff64\036" +
    "\uff64\051\uff64\055\uff64\062\uff64\066\uff64\072\uff64\073\uff64" +
    "\075\uff64\076\uff64\077\uff64\102\uff64\103\u014b\105\uff64\111" +
    "\uff64\001\002\000\004\055\u0146\001\002\000\012\002\ufffa" +
    "\011\ufffa\015\ufffa\112\ufffa\001\002\000\012\002\ufff2\011" +
    "\ufff2\015\ufff2\112\ufff2\001\002\000\042\014\u0133\025\u0135" +
    "\051\uff68\055\uff68\060\uffe9\062\uff68\066\uff68\072\uff68\073" +
    "\uff68\074\u0134\075\uff68\076\uff68\077\uff68\102\uff68\105\uff68" +
    "\111\uff68\001\002\000\004\055\u012c\001\002\000\032\051" +
    "\043\055\052\062\053\066\044\072\054\073\046\075\uffdc" +
    "\076\uffdc\077\051\102\045\105\055\111\uffde\001\002\000" +
    "\012\002\ufffc\011\ufffc\015\ufffc\112\ufffc\001\002\000\042" +
    "\012\uff67\016\uff67\021\uff67\036\uff67\051\uff67\055\uff67\062" +
    "\uff67\066\uff67\072\uff67\073\uff67\075\uff67\076\uff67\077\uff67" +
    "\102\uff67\105\uff67\111\uff67\001\002\000\004\111\u0125\001" +
    "\002\000\020\002\uff9a\004\uff9a\005\uff9a\011\uff9a\015\uff9a" +
    "\056\143\112\uff9a\001\002\000\006\075\uffdd\076\uffdd\001" +
    "\002\000\016\002\uff9a\004\uff9a\011\uff9a\015\uff9a\056\143" +
    "\112\uff9a\001\002\000\004\055\u0104\001\002\000\006\075" +
    "\371\076\372\001\002\000\004\055\365\001\002\000\004" +
    "\055\uffa1\001\002\000\024\002\uff9a\004\uff9a\011\uff9a\012" +
    "\uff9a\015\uff9a\021\uff9a\055\302\056\143\112\uff9a\001\002" +
    "\000\004\055\351\001\002\000\004\055\056\001\002\000" +
    "\006\055\uffa0\111\uffdf\001\002\000\014\014\uff57\021\057" +
    "\100\uff57\101\uff57\112\uff57\001\002\000\022\012\072\014" +
    "\105\016\110\021\057\055\070\102\103\104\076\113\uff57" +
    "\001\002\000\012\014\uffc8\100\061\101\uffc8\112\uffc8\001" +
    "\002\000\022\012\072\014\105\016\110\021\057\055\070" +
    "\102\103\104\076\113\uff57\001\002\000\010\014\uffc6\101" +
    "\064\112\uffc6\001\002\000\006\014\uffbe\112\006\001\002" +
    "\000\024\012\uffbe\014\uffbe\016\uffbe\021\uffbe\055\uffbe\102" +
    "\uffbe\104\uffbe\112\006\113\uffbe\001\002\000\022\012\072" +
    "\014\105\016\110\021\057\055\070\102\103\104\076\113" +
    "\uff57\001\002\000\040\002\uff85\005\uff85\011\uff85\013\uff85" +
    "\014\uff85\015\uff85\017\uff85\024\uff85\036\uff85\042\uff85\044" +
    "\uff85\100\uff85\101\uff85\112\uff85\114\uff85\001\002\000\020" +
    "\005\uffc4\014\uffc4\017\uffc4\042\116\044\117\101\uffc4\112" +
    "\uffc4\001\002\000\050\002\uff5e\005\uff5e\006\303\011\uff5e" +
    "\013\uff5e\014\uff5e\015\uff5e\017\uff5e\020\uff5e\021\uff5e\024" +
    "\uff5e\036\uff5e\042\uff5e\044\uff5e\100\uff5e\101\uff5e\106\332" +
    "\112\uff5e\114\uff5e\001\002\000\042\002\uff7e\005\uff7e\011" +
    "\uff7e\013\uff7e\014\uff7e\015\uff7e\017\uff7e\020\331\024\uff7e" +
    "\036\uff7e\042\uff7e\044\uff7e\100\uff7e\101\uff7e\112\uff7e\114" +
    "\uff7e\001\002\000\022\012\072\014\105\016\110\021\057" +
    "\055\310\102\103\104\313\113\uff57\001\002\000\042\002" +
    "\uff81\005\uff81\011\uff81\013\uff81\014\uff81\015\uff81\017\uff81" +
    "\020\306\024\uff81\036\uff81\042\uff81\044\uff81\100\uff81\101" +
    "\uff81\112\uff81\114\uff81\001\002\000\040\002\uff86\005\uff86" +
    "\011\uff86\013\uff86\014\uff86\015\uff86\017\uff86\024\uff86\036" +
    "\uff86\042\uff86\044\uff86\100\uff86\101\uff86\112\uff86\114\uff86" +
    "\001\002\000\042\002\uff7f\005\uff7f\011\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\017\uff7f\020\305\024\uff7f\036\uff7f\042\uff7f" +
    "\044\uff7f\100\uff7f\101\uff7f\112\uff7f\114\uff7f\001\002\000" +
    "\004\055\302\001\002\000\040\002\uff82\005\uff82\011\uff82" +
    "\013\uff82\014\uff82\015\uff82\017\uff82\024\uff82\036\uff82\042" +
    "\uff82\044\uff82\100\uff82\101\uff82\112\uff82\114\uff82\001\002" +
    "\000\040\002\uff84\005\uff84\011\uff84\013\uff84\014\uff84\015" +
    "\uff84\017\uff84\024\uff84\036\uff84\042\uff84\044\uff84\100\uff84" +
    "\101\uff84\112\uff84\114\uff84\001\002\000\044\002\uff5b\005" +
    "\uff5b\011\uff5b\013\uff5b\014\uff5b\015\uff5b\017\uff5b\020\uff5b" +
    "\021\272\024\uff5b\036\uff5b\042\uff5b\044\uff5b\100\uff5b\101" +
    "\uff5b\112\uff5b\114\uff5b\001\002\000\010\005\112\014\uffc7" +
    "\112\uffc7\001\002\000\006\021\057\113\uff57\001\002\000" +
    "\040\002\uff83\005\uff83\011\uff83\013\uff83\014\uff83\015\uff83" +
    "\017\uff83\024\uff83\036\uff83\042\uff83\044\uff83\100\uff83\101" +
    "\uff83\112\uff83\114\uff83\001\002\000\052\003\uffbe\012\uffbe" +
    "\015\uffbe\016\uffbe\021\uffbe\036\uffbe\051\uffbe\055\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\067\uffbe\071\uffbe" +
    "\077\uffbe\102\uffbe\103\uffbe\105\uffbe\112\006\001\002\000" +
    "\042\002\uff80\005\uff80\011\uff80\013\uff80\014\uff80\015\uff80" +
    "\017\uff80\020\161\024\uff80\036\uff80\042\uff80\044\uff80\100" +
    "\uff80\101\uff80\112\uff80\114\uff80\001\002\000\004\113\124" +
    "\001\002\000\022\012\072\014\105\016\110\021\057\055" +
    "\070\102\103\104\076\113\uff57\001\002\000\006\005\112" +
    "\017\113\001\002\000\024\012\uffbe\014\uffbe\016\uffbe\021" +
    "\uffbe\055\uffbe\102\uffbe\104\uffbe\112\006\113\uffbe\001\002" +
    "\000\042\002\uff78\005\uff78\011\uff78\013\uff78\014\uff78\015" +
    "\uff78\017\uff78\020\uff78\024\uff78\036\uff78\042\uff78\044\uff78" +
    "\100\uff78\101\uff78\112\uff78\114\uff78\001\002\000\022\012" +
    "\072\014\105\016\110\021\057\055\070\102\103\104\076" +
    "\113\uff57\001\002\000\020\005\uffc5\014\uffc5\017\uffc5\042" +
    "\116\044\117\101\uffc5\112\uffc5\001\002\000\024\012\uffbe" +
    "\014\uffbe\016\uffbe\021\uffbe\055\uffbe\102\uffbe\104\uffbe\112" +
    "\006\113\uffbe\001\002\000\024\012\uffbe\014\uffbe\016\uffbe" +
    "\021\uffbe\055\uffbe\102\uffbe\104\uffbe\112\006\113\uffbe\001" +
    "\002\000\022\012\072\014\105\016\110\021\057\055\070" +
    "\102\103\104\076\113\uff57\001\002\000\040\002\uff7d\005" +
    "\uff7d\011\uff7d\013\uff7d\014\uff7d\015\uff7d\017\uff7d\024\uff7d" +
    "\036\uff7d\042\uff7d\044\uff7d\100\uff7d\101\uff7d\112\uff7d\114" +
    "\uff7d\001\002\000\022\012\072\014\105\016\110\021\057" +
    "\055\070\102\103\104\076\113\uff57\001\002\000\040\002" +
    "\uff7b\005\uff7b\011\uff7b\013\uff7b\014\uff7b\015\uff7b\017\uff7b" +
    "\024\uff7b\036\uff7b\042\uff7b\044\uff7b\100\uff7b\101\uff7b\112" +
    "\uff7b\114\uff7b\001\002\000\014\010\uffbe\036\uffbe\055\uffbe" +
    "\112\006\114\uffbe\001\002\000\016\010\uffa8\013\uff8f\036" +
    "\134\055\uffa8\112\uffa8\114\uff8f\001\002\000\004\114\127" +
    "\001\002\000\004\045\130\001\002\000\022\012\072\014" +
    "\105\016\110\021\057\055\070\102\103\104\076\113\uff57" +
    "\001\002\000\040\002\uff71\005\uff71\011\uff71\013\uff71\014" +
    "\uff71\015\uff71\017\uff71\024\uff71\036\uff71\042\116\044\117" +
    "\100\uff71\101\uff71\112\uff71\114\uff71\001\002\000\012\005" +
    "\uffbe\013\uffbe\112\006\114\uffbe\001\002\000\010\010\uffbe" +
    "\055\uffbe\112\006\001\002\000\036\005\uffa9\010\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\021\uffa9\055\uffa9" +
    "\102\uffa9\104\uffa9\112\uffa9\113\uffa9\114\uffa9\001\002\000" +
    "\012\005\uff8d\013\uff8d\112\uff8d\114\uff8d\001\002\000\006" +
    "\010\137\055\uff8a\001\002\000\004\055\uff8b\001\002\000" +
    "\004\055\141\001\002\000\022\004\uff9a\005\uff9a\013\uff9a" +
    "\017\uff9a\036\uff9a\056\143\112\uff9a\114\uff9a\001\002\000" +
    "\020\004\144\005\uff88\013\uff88\017\uff88\036\uff88\112\uff88" +
    "\114\uff88\001\002\000\032\002\uff9b\004\uff9b\005\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\015\uff9b\017\uff9b\021\uff9b\036\uff9b" +
    "\112\uff9b\114\uff9b\001\002\000\026\012\uffbe\014\uffbe\016" +
    "\uffbe\021\uffbe\036\uffbe\055\uffbe\102\uffbe\104\uffbe\112\006" +
    "\113\uffbe\001\002\000\016\005\uffa8\013\uffa8\017\uffa8\036" +
    "\134\112\uffa8\114\uffa8\001\002\000\024\002\uff89\005\uff89" +
    "\011\uff89\013\uff89\015\uff89\017\uff89\036\uff89\112\uff89\114" +
    "\uff89\001\002\000\014\005\uffbe\013\uffbe\017\uffbe\112\006" +
    "\114\uffbe\001\002\000\014\005\uff8c\013\uff8c\017\uff8c\112" +
    "\uff8c\114\uff8c\001\002\000\026\012\uffa8\014\uffa8\016\uffa8" +
    "\021\uffa8\036\134\055\uffa8\102\uffa8\104\uffa8\112\uffa8\113" +
    "\uffa8\001\002\000\024\012\uffbe\014\uffbe\016\uffbe\021\uffbe" +
    "\055\uffbe\102\uffbe\104\uffbe\112\006\113\uffbe\001\002\000" +
    "\022\012\072\014\105\016\110\021\057\055\070\102\103" +
    "\104\076\113\uff57\001\002\000\030\002\uff87\005\uff87\011" +
    "\uff87\013\uff87\015\uff87\017\uff87\036\uff87\042\116\044\117" +
    "\112\uff87\114\uff87\001\002\000\010\005\156\013\uff90\114" +
    "\uff90\001\002\000\012\010\uffbe\036\uffbe\055\uffbe\112\006" +
    "\001\002\000\012\010\uffa8\036\134\055\uffa8\112\uffa8\001" +
    "\002\000\012\005\uff8e\013\uff8e\112\uff8e\114\uff8e\001\002" +
    "\000\042\002\uff73\005\uff73\011\uff73\013\uff73\014\uff73\015" +
    "\uff73\017\uff73\020\uff73\024\uff73\036\uff73\042\uff73\044\uff73" +
    "\100\uff73\101\uff73\112\uff73\114\uff73\001\002\000\004\015" +
    "\263\001\002\000\050\003\173\012\uff5f\015\uffc2\016\uff5f" +
    "\021\uff5f\036\165\051\uff5f\055\uff5f\061\176\062\uff5f\063" +
    "\020\064\031\065\024\067\041\071\036\077\uff5f\102\uff5f" +
    "\103\026\105\uff5f\001\002\000\012\005\252\011\254\015" +
    "\uffb2\112\006\001\002\000\012\005\uffac\011\uffac\015\uffac" +
    "\112\uffac\001\002\000\012\005\uffa4\011\uffa4\015\uffa4\112" +
    "\uffa4\001\002\000\012\005\uffa5\011\uffa5\015\uffa5\112\uffa5" +
    "\001\002\000\012\005\uffaf\011\uffaf\015\uffaf\112\uffaf\001" +
    "\002\000\012\005\uffad\011\uffad\015\uffad\112\uffad\001\002" +
    "\000\012\005\uffa7\011\uffa7\015\uffa7\112\uffa7\001\002\000" +
    "\012\005\uffae\011\uffae\015\uffae\112\uffae\001\002\000\012" +
    "\005\uffb0\011\uffb0\015\uffb0\112\uffb0\001\002\000\012\005" +
    "\uffa6\011\uffa6\015\uffa6\112\uffa6\001\002\000\026\012\uff68" +
    "\016\uff68\021\uff68\036\uff68\051\uff68\055\uff68\062\uff68\077" +
    "\uff68\102\uff68\105\uff68\001\002\000\026\012\uff57\016\uffa8" +
    "\021\057\036\134\051\043\055\202\062\053\077\051\102" +
    "\200\105\204\001\002\000\022\004\uff9a\005\uff9a\011\uff9a" +
    "\012\uff57\015\uff9a\021\057\056\143\112\uff9a\001\002\000" +
    "\004\012\236\001\002\000\022\004\uff9a\005\uff9a\011\uff9a" +
    "\012\uff9a\015\uff9a\021\uff9a\056\143\112\uff9a\001\002\000" +
    "\004\016\212\001\002\000\010\016\uff57\021\057\055\uffa0" +
    "\001\002\000\004\016\206\001\002\000\012\010\uffa8\036" +
    "\134\055\uffa8\112\uffa8\001\002\000\004\017\210\001\002" +
    "\000\014\004\144\005\uff88\011\uff88\015\uff88\112\uff88\001" +
    "\002\000\012\005\uff91\011\uff91\015\uff91\112\uff91\001\002" +
    "\000\004\055\213\001\002\000\006\004\144\006\215\001" +
    "\002\000\004\017\224\001\002\000\004\055\216\001\002" +
    "\000\004\017\217\001\002\000\016\004\144\005\uff88\011" +
    "\uff88\012\220\015\uff88\112\uff88\001\002\000\004\013\222" +
    "\001\002\000\012\005\uff93\011\uff93\015\uff93\112\uff93\001" +
    "\002\000\014\004\144\005\uff88\011\uff88\015\uff88\112\uff88" +
    "\001\002\000\012\005\uff92\011\uff92\015\uff92\112\uff92\001" +
    "\002\000\014\004\144\005\uff88\011\uff88\015\uff88\112\uff88" +
    "\001\002\000\012\005\uff94\011\uff94\015\uff94\112\uff94\001" +
    "\002\000\022\002\uffbe\004\uffbe\005\uffbe\011\uffbe\012\uff57" +
    "\015\uffbe\021\057\112\006\001\002\000\004\012\232\001" +
    "\002\000\016\002\uff88\004\144\005\uff88\011\uff88\015\uff88" +
    "\112\uff88\001\002\000\014\002\uff9e\005\uff9e\011\uff9e\015" +
    "\uff9e\112\uff9e\001\002\000\014\010\uffbe\013\uffbe\036\uffbe" +
    "\055\uffbe\112\006\001\002\000\004\013\234\001\002\000" +
    "\016\002\uff88\004\144\005\uff88\011\uff88\015\uff88\112\uff88" +
    "\001\002\000\014\002\uff99\005\uff99\011\uff99\015\uff99\112" +
    "\uff99\001\002\000\014\010\uffbe\013\uffbe\036\uffbe\055\uffbe" +
    "\112\006\001\002\000\004\013\240\001\002\000\014\004" +
    "\144\005\uff88\011\uff88\015\uff88\112\uff88\001\002\000\012" +
    "\005\uff96\011\uff96\015\uff96\112\uff96\001\002\000\004\012" +
    "\246\001\002\000\016\002\uffbe\004\uffbe\005\uffbe\011\uffbe" +
    "\015\uffbe\112\006\001\002\000\016\002\uff88\004\144\005" +
    "\uff88\011\uff88\015\uff88\112\uff88\001\002\000\014\002\uff9c" +
    "\005\uff9c\011\uff9c\015\uff9c\112\uff9c\001\002\000\014\010" +
    "\uffbe\013\uffbe\036\uffbe\055\uffbe\112\006\001\002\000\004" +
    "\013\250\001\002\000\014\004\144\005\uff88\011\uff88\015" +
    "\uff88\112\uff88\001\002\000\012\005\uff95\011\uff95\015\uff95" +
    "\112\uff95\001\002\000\052\003\uffb5\012\uffb5\015\uffb5\016" +
    "\uffb5\021\uffb5\036\uffb5\051\uffb5\055\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\067\uffb5\071\uffb5\077\uffb5\102" +
    "\uffb5\103\uffb5\105\uffb5\112\006\001\002\000\052\003\uffb4" +
    "\012\uffb4\015\uffb4\016\uffb4\021\uffb4\036\uffb4\051\uffb4\055" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4" +
    "\071\uffb4\077\uffb4\102\uffb4\103\uffb4\105\uffb4\112\261\001" +
    "\002\000\052\003\uffb7\012\uffb7\015\uffb7\016\uffb7\021\uffb7" +
    "\036\uffb7\051\uffb7\055\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\067\uffb7\071\uffb7\077\uffb7\102\uffb7\103\uffb7" +
    "\105\uffb7\112\006\001\002\000\050\003\173\012\uff5f\015" +
    "\uffb3\016\uff5f\021\uff5f\036\165\051\uff5f\055\uff5f\061\176" +
    "\062\uff5f\063\020\064\031\065\024\067\041\071\036\077" +
    "\uff5f\102\uff5f\103\026\105\uff5f\001\002\000\004\015\uffc3" +
    "\001\002\000\012\005\uffb1\011\uffb1\015\uffb1\112\uffb1\001" +
    "\002\000\052\003\uffb8\012\uffb8\015\uffb8\016\uffb8\021\uffb8" +
    "\036\uffb8\051\uffb8\055\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\067\uffb8\071\uffb8\077\uffb8\102\uffb8\103\uffb8" +
    "\105\uffb8\112\261\001\002\000\122\002\uffc1\003\uffc1\004" +
    "\uffc1\005\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\021\uffc1\036\uffc1\051\uffc1\055" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\105\uffc1\111\uffc1\112\uffc1\113\uffc1\114\uffc1\001\002\000" +
    "\052\003\uffb6\012\uffb6\015\uffb6\016\uffb6\021\uffb6\036\uffb6" +
    "\051\uffb6\055\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065" +
    "\uffb6\067\uffb6\071\uffb6\077\uffb6\102\uffb6\103\uffb6\105\uffb6" +
    "\112\261\001\002\000\042\002\uff6e\005\uff6e\011\uff6e\013" +
    "\uff6e\014\uff6e\015\uff6e\017\uff6e\020\uff6e\024\uff6e\036\uff6e" +
    "\042\uff6e\044\uff6e\100\uff6e\101\uff6e\112\uff6e\114\uff6e\001" +
    "\002\000\004\113\265\001\002\000\014\010\uffbe\036\uffbe" +
    "\055\uffbe\112\006\114\uffbe\001\002\000\004\114\267\001" +
    "\002\000\004\045\270\001\002\000\022\012\072\014\105" +
    "\016\110\021\057\055\070\102\103\104\076\113\uff57\001" +
    "\002\000\040\002\uff70\005\uff70\011\uff70\013\uff70\014\uff70" +
    "\015\uff70\017\uff70\024\uff70\036\uff70\042\116\044\117\100" +
    "\uff70\101\uff70\112\uff70\114\uff70\001\002\000\022\012\072" +
    "\014\105\016\110\021\057\055\070\102\103\104\076\113" +
    "\uff57\001\002\000\042\002\uff79\005\uff79\011\uff79\013\uff79" +
    "\014\uff79\015\uff79\017\uff79\020\uff79\024\uff79\036\uff79\042" +
    "\uff79\044\uff79\100\uff79\101\uff79\112\uff79\114\uff79\001\002" +
    "\000\012\005\uff59\024\uff59\042\116\044\117\001\002\000" +
    "\006\005\276\024\277\001\002\000\022\012\072\014\105" +
    "\016\110\021\057\055\070\102\103\104\076\113\uff57\001" +
    "\002\000\042\002\uff5c\005\uff5c\011\uff5c\013\uff5c\014\uff5c" +
    "\015\uff5c\017\uff5c\020\uff5c\024\uff5c\036\uff5c\042\uff5c\044" +
    "\uff5c\100\uff5c\101\uff5c\112\uff5c\114\uff5c\001\002\000\012" +
    "\005\uff5a\024\uff5a\042\116\044\117\001\002\000\040\002" +
    "\uff6c\005\uff6c\011\uff6c\013\uff6c\014\uff6c\015\uff6c\017\uff6c" +
    "\024\uff6c\036\uff6c\042\uff6c\044\uff6c\100\uff6c\101\uff6c\112" +
    "\uff6c\114\uff6c\001\002\000\046\002\uff5e\005\uff5e\006\303" +
    "\011\uff5e\013\uff5e\014\uff5e\015\uff5e\017\uff5e\020\uff5e\021" +
    "\uff5e\024\uff5e\036\uff5e\042\uff5e\044\uff5e\100\uff5e\101\uff5e" +
    "\112\uff5e\114\uff5e\001\002\000\004\055\302\001\002\000" +
    "\044\002\uff5d\005\uff5d\011\uff5d\013\uff5d\014\uff5d\015\uff5d" +
    "\017\uff5d\020\uff5d\021\uff5d\024\uff5d\036\uff5d\042\uff5d\044" +
    "\uff5d\100\uff5d\101\uff5d\112\uff5d\114\uff5d\001\002\000\042" +
    "\002\uff77\005\uff77\011\uff77\013\uff77\014\uff77\015\uff77\017" +
    "\uff77\020\uff77\024\uff77\036\uff77\042\uff77\044\uff77\100\uff77" +
    "\101\uff77\112\uff77\114\uff77\001\002\000\042\002\uff76\005" +
    "\uff76\011\uff76\013\uff76\014\uff76\015\uff76\017\uff76\020\uff76" +
    "\024\uff76\036\uff76\042\uff76\044\uff76\100\uff76\101\uff76\112" +
    "\uff76\114\uff76\001\002\000\006\042\116\044\117\001\002" +
    "\000\016\006\303\020\uff5e\021\uff5e\042\uff5e\044\uff5e\106" +
    "\326\001\002\000\012\013\325\020\306\042\uff81\044\uff81" +
    "\001\002\000\010\013\323\042\uff86\044\uff86\001\002\000" +
    "\004\055\302\001\002\000\010\013\320\042\uff82\044\uff82" +
    "\001\002\000\010\013\316\042\uff83\044\uff83\001\002\000" +
    "\042\002\uff7c\005\uff7c\011\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\017\uff7c\020\317\024\uff7c\036\uff7c\042\uff7c\044\uff7c\100" +
    "\uff7c\101\uff7c\112\uff7c\114\uff7c\001\002\000\042\002\uff72" +
    "\005\uff72\011\uff72\013\uff72\014\uff72\015\uff72\017\uff72\020" +
    "\uff72\024\uff72\036\uff72\042\uff72\044\uff72\100\uff72\101\uff72" +
    "\112\uff72\114\uff72\001\002\000\040\002\uff7a\005\uff7a\011" +
    "\uff7a\013\uff7a\014\uff7a\015\uff7a\017\uff7a\024\uff7a\036\uff7a" +
    "\042\uff7a\044\uff7a\100\uff7a\101\uff7a\112\uff7a\114\uff7a\001" +
    "\002\000\010\013\322\042\uff6c\044\uff6c\001\002\000\040" +
    "\002\uff6b\005\uff6b\011\uff6b\013\uff6b\014\uff6b\015\uff6b\017" +
    "\uff6b\024\uff6b\036\uff6b\042\uff6b\044\uff6b\100\uff6b\101\uff6b" +
    "\112\uff6b\114\uff6b\001\002\000\042\002\uff6f\005\uff6f\011" +
    "\uff6f\013\uff6f\014\uff6f\015\uff6f\017\uff6f\020\324\024\uff6f" +
    "\036\uff6f\042\uff6f\044\uff6f\100\uff6f\101\uff6f\112\uff6f\114" +
    "\uff6f\001\002\000\042\002\uff74\005\uff74\011\uff74\013\uff74" +
    "\014\uff74\015\uff74\017\uff74\020\uff74\024\uff74\036\uff74\042" +
    "\uff74\044\uff74\100\uff74\101\uff74\112\uff74\114\uff74\001\002" +
    "\000\042\002\uff6d\005\uff6d\011\uff6d\013\uff6d\014\uff6d\015" +
    "\uff6d\017\uff6d\020\uff6d\024\uff6d\036\uff6d\042\uff6d\044\uff6d" +
    "\100\uff6d\101\uff6d\112\uff6d\114\uff6d\001\002\000\022\012" +
    "\072\014\105\016\110\021\057\055\070\102\103\104\076" +
    "\113\uff57\001\002\000\010\013\330\042\116\044\117\001" +
    "\002\000\040\002\uff69\005\uff69\011\uff69\013\uff69\014\uff69" +
    "\015\uff69\017\uff69\024\uff69\036\uff69\042\uff69\044\uff69\100" +
    "\uff69\101\uff69\112\uff69\114\uff69\001\002\000\042\002\uff75" +
    "\005\uff75\011\uff75\013\uff75\014\uff75\015\uff75\017\uff75\020" +
    "\uff75\024\uff75\036\uff75\042\uff75\044\uff75\100\uff75\101\uff75" +
    "\112\uff75\114\uff75\001\002\000\022\012\072\014\105\016" +
    "\110\021\057\055\070\102\103\104\076\113\uff57\001\002" +
    "\000\040\002\uff6a\005\uff6a\011\uff6a\013\uff6a\014\uff6a\015" +
    "\uff6a\017\uff6a\024\uff6a\036\uff6a\042\116\044\117\100\uff6a" +
    "\101\uff6a\112\uff6a\114\uff6a\001\002\000\004\014\335\001" +
    "\002\000\052\003\uffbe\012\uffbe\015\uffbe\016\uffbe\021\uffbe" +
    "\036\uffbe\051\uffbe\055\uffbe\061\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\067\uffbe\071\uffbe\077\uffbe\102\uffbe\103\uffbe" +
    "\105\uffbe\112\006\001\002\000\004\015\337\001\002\000" +
    "\012\002\uffe0\011\uffe0\015\uffe0\112\uffe0\001\002\000\012" +
    "\005\112\014\uffc9\101\uffc9\112\uffc9\001\002\000\006\005" +
    "\346\024\347\001\002\000\014\005\uff54\024\uff54\042\116" +
    "\044\117\100\344\001\002\000\006\005\uff55\024\uff55\001" +
    "\002\000\022\012\072\014\105\016\110\021\057\055\070" +
    "\102\103\104\076\113\uff57\001\002\000\012\005\uff53\024" +
    "\uff53\042\116\044\117\001\002\000\022\012\072\014\105" +
    "\016\110\021\057\055\070\102\103\104\076\113\uff57\001" +
    "\002\000\022\012\uff58\014\uff58\016\uff58\025\uff58\100\uff58" +
    "\101\uff58\112\uff58\113\uff58\001\002\000\006\005\uff56\024" +
    "\uff56\001\002\000\010\012\uff9a\021\uff9a\056\143\001\002" +
    "\000\006\012\uff57\021\057\001\002\000\004\012\354\001" +
    "\002\000\014\010\uffbe\013\uffbe\036\uffbe\055\uffbe\112\006" +
    "\001\002\000\004\013\356\001\002\000\016\002\uff88\004" +
    "\144\005\uff88\011\uff88\015\uff88\112\uff88\001\002\000\014" +
    "\002\uff98\005\uff98\011\uff98\015\uff98\112\uff98\001\002\000" +
    "\006\014\uffbe\112\006\001\002\000\004\014\362\001\002" +
    "\000\066\003\uffbe\015\uffbe\036\uffbe\051\uffbe\055\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\102\uffbe\103\uffbe\105\uffbe\111\uffbe" +
    "\112\006\001\002\000\004\015\364\001\002\000\012\002" +
    "\uffa3\011\uffa3\015\uffa3\112\uffa3\001\002\000\020\002\uff9a" +
    "\004\uff9a\005\uff9a\011\uff9a\015\uff9a\056\143\112\uff9a\001" +
    "\002\000\016\002\uffbe\004\uffbe\005\uffbe\011\uffbe\015\uffbe" +
    "\112\006\001\002\000\016\002\uff88\004\144\005\uff88\011" +
    "\uff88\015\uff88\112\uff88\001\002\000\014\002\uff9f\005\uff9f" +
    "\011\uff9f\015\uff9f\112\uff9f\001\002\000\004\055\uffcb\001" +
    "\002\000\004\055\uffca\001\002\000\004\055\374\001\002" +
    "\000\014\014\uff57\021\057\100\uff57\101\uff57\112\uff57\001" +
    "\002\000\012\014\uffc8\100\061\101\uffc8\112\uffc8\001\002" +
    "\000\010\014\uffc6\101\064\112\uffc6\001\002\000\006\014" +
    "\uffbe\112\006\001\002\000\004\014\u0101\001\002\000\052" +
    "\003\uffbe\012\uffbe\015\uffbe\016\uffbe\021\uffbe\036\uffbe\051" +
    "\uffbe\055\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\067\uffbe\071\uffbe\077\uffbe\102\uffbe\103\uffbe\105\uffbe\112" +
    "\006\001\002\000\004\015\u0103\001\002\000\012\002\uffe1" +
    "\011\uffe1\015\uffe1\112\uffe1\001\002\000\010\014\uff57\021" +
    "\057\112\uff57\001\002\000\006\014\uffbe\112\006\001\002" +
    "\000\004\014\u0107\001\002\000\014\003\uffbe\015\uffbe\036" +
    "\uffbe\055\uffbe\112\006\001\002\000\012\003\u010e\015\uffd8" +
    "\036\u0110\055\u0111\001\002\000\004\015\u010a\001\002\000" +
    "\012\002\uffdb\011\uffdb\015\uffdb\112\uffdb\001\002\000\012" +
    "\005\uffcf\015\uffcf\036\uffcf\112\uffcf\001\002\000\012\005" +
    "\uffd6\015\uffd6\036\uffd6\112\uffd6\001\002\000\012\005\uffd2" +
    "\015\uffd2\036\uffd2\112\uffd2\001\002\000\012\005\uffd1\015" +
    "\uffd1\036\uffd1\112\uffd1\001\002\000\012\005\u011a\015\uffbe" +
    "\036\uffbe\112\006\001\002\000\014\005\uffbe\015\uffbe\036" +
    "\uffbe\055\uffbe\112\006\001\002\000\014\005\uffce\015\uffce" +
    "\025\u0115\036\uffce\112\uffce\001\002\000\006\055\uffbe\112" +
    "\006\001\002\000\004\055\u0111\001\002\000\012\005\uffd0" +
    "\015\uffd0\036\uffd0\112\uffd0\001\002\000\004\051\u0117\001" +
    "\002\000\012\005\uffcd\015\uffcd\036\uffcd\112\uffcd\001\002" +
    "\000\012\005\uffcc\015\uffcc\036\uffcc\112\uffcc\001\002\000" +
    "\014\005\uffaa\015\uffaa\036\u0110\055\uffaa\112\uffaa\001\002" +
    "\000\014\005\uffab\015\uffab\036\uffab\055\uffab\112\uffab\001" +
    "\002\000\016\003\uffbe\005\uffbe\015\uffbe\036\uffbe\055\uffbe" +
    "\112\006\001\002\000\006\015\uffd9\036\u0110\001\002\000" +
    "\012\005\uffbe\015\uffbe\036\uffbe\112\006\001\002\000\012" +
    "\005\uffd4\015\uffd4\036\uffd4\112\uffd4\001\002\000\016\003" +
    "\u010e\005\uffd5\015\uffd5\036\u0110\055\u0111\112\uffd5\001\002" +
    "\000\012\005\uffd7\015\uffd7\036\uffd7\112\uffd7\001\002\000" +
    "\014\005\uffbe\015\uffbe\036\uffbe\055\uffbe\112\006\001\002" +
    "\000\014\005\uffd3\015\uffd3\036\uffd3\055\u0111\112\uffd3\001" +
    "\002\000\016\002\uffbe\004\uffbe\005\uffbe\011\uffbe\015\uffbe" +
    "\112\006\001\002\000\016\002\uff88\004\144\005\uff88\011" +
    "\uff88\015\uff88\112\uff88\001\002\000\014\002\uff9d\005\uff9d" +
    "\011\uff9d\015\uff9d\112\uff9d\001\002\000\004\055\u0126\001" +
    "\002\000\010\014\uff57\021\057\112\uff57\001\002\000\006" +
    "\014\uffbe\112\006\001\002\000\004\014\u0129\001\002\000" +
    "\014\003\uffbe\015\uffbe\036\uffbe\055\uffbe\112\006\001\002" +
    "\000\004\015\u012b\001\002\000\012\002\uffda\011\uffda\015" +
    "\uffda\112\uffda\001\002\000\010\012\uff9a\021\uff9a\056\143" +
    "\001\002\000\006\012\uff57\021\057\001\002\000\004\012" +
    "\u012f\001\002\000\014\010\uffbe\013\uffbe\036\uffbe\055\uffbe" +
    "\112\006\001\002\000\004\013\u0131\001\002\000\016\002" +
    "\uff88\004\144\005\uff88\011\uff88\015\uff88\112\uff88\001\002" +
    "\000\014\002\uff97\005\uff97\011\uff97\015\uff97\112\uff97\001" +
    "\002\000\004\055\u013d\001\002\000\004\055\u0138\001\002" +
    "\000\004\055\u0136\001\002\000\012\002\uffbe\011\uffbe\015" +
    "\uffbe\112\006\001\002\000\012\002\uffef\011\uffef\015\uffef" +
    "\112\uffef\001\002\000\006\021\057\025\uff57\001\002\000" +
    "\004\025\u013a\001\002\000\022\012\072\014\105\016\110" +
    "\021\057\055\070\102\103\104\076\113\uff57\001\002\000" +
    "\016\002\uffe2\011\uffe2\015\uffe2\042\116\044\117\112\uffe2" +
    "\001\002\000\006\005\u0141\015\u0142\001\002\000\010\005" +
    "\uffeb\015\uffeb\107\u013f\001\002\000\006\005\uffec\015\uffec" +
    "\001\002\000\004\055\u0140\001\002\000\006\005\uffea\015" +
    "\uffea\001\002\000\006\055\uffbe\112\006\001\002\000\012" +
    "\002\uffbe\011\uffbe\015\uffbe\112\006\001\002\000\012\002" +
    "\uffee\011\uffee\015\uffee\112\uffee\001\002\000\004\055\u013d" +
    "\001\002\000\006\005\uffed\015\uffed\001\002\000\006\021" +
    "\057\025\uff57\001\002\000\004\025\u0148\001\002\000\024" +
    "\012\uffbe\014\uffbe\016\uffbe\021\uffbe\055\uffbe\102\uffbe\104" +
    "\uffbe\112\006\113\uffbe\001\002\000\022\012\072\014\105" +
    "\016\110\021\057\055\070\102\103\104\076\113\uff57\001" +
    "\002\000\016\002\uffe3\011\uffe3\015\uffe3\042\116\044\117" +
    "\112\uffe3\001\002\000\042\012\uff62\016\uff62\021\uff62\036" +
    "\uff62\051\uff62\055\uff62\062\uff62\066\uff62\072\uff62\073\uff62" +
    "\075\uff62\076\uff62\077\uff62\102\uff62\105\uff62\111\uff62\001" +
    "\002\000\066\002\uffba\003\033\015\uffba\036\015\051\uff5f" +
    "\055\uff5f\060\uffe8\061\035\062\uff5f\063\020\064\031\065" +
    "\024\066\uff5f\067\041\070\023\071\036\072\uff5f\073\uff5f" +
    "\074\032\075\uff5f\076\uff5f\077\uff5f\102\uff5f\103\026\105" +
    "\uff5f\111\uff5f\001\002\000\070\002\uffbb\003\uffbb\015\uffbb" +
    "\036\uffbb\051\uffbb\055\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\102" +
    "\uffbb\103\uffbb\105\uffbb\111\uffbb\112\261\001\002\000\006" +
    "\002\uffff\015\uffff\001\002\000\070\002\uffbc\003\uffbc\015" +
    "\uffbc\036\uffbc\051\uffbc\055\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\102\uffbc\103\uffbc\105\uffbc\111\uffbc\112\006\001\002\000" +
    "\070\002\uffbd\003\uffbd\015\uffbd\036\uffbd\051\uffbd\055\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\102\uffbd\103\uffbd\105\uffbd\111" +
    "\uffbd\112\261\001\002\000\012\002\ufffd\011\ufffd\015\ufffd" +
    "\112\ufffd\001\002\000\042\012\uff60\016\uff60\021\uff60\036" +
    "\uff60\051\uff60\055\uff60\062\uff60\066\uff60\072\uff60\073\uff60" +
    "\075\uff60\076\uff60\077\uff60\102\uff60\105\uff60\111\uff60\001" +
    "\002\000\006\014\uffbe\112\006\001\002\000\004\014\u0155" +
    "\001\002\000\066\003\uffbe\015\uffbe\036\uffbe\051\uffbe\055" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\102\uffbe\103\uffbe\105\uffbe" +
    "\111\uffbe\112\006\001\002\000\004\015\u0157\001\002\000" +
    "\012\002\uffa2\011\uffa2\015\uffa2\112\uffa2\001\002\000\042" +
    "\012\uff63\016\uff63\021\uff63\036\uff63\051\uff63\055\uff63\062" +
    "\uff63\066\uff63\072\uff63\073\uff63\075\uff63\076\uff63\077\uff63" +
    "\102\uff63\105\uff63\111\uff63\001\002\000\006\030\u015b\055" +
    "\u015c\001\002\000\012\002\uffe7\011\uffe7\015\uffe7\112\uffe7" +
    "\001\002\000\004\107\u0163\001\002\000\004\025\u015d\001" +
    "\002\000\004\055\u015f\001\002\000\012\002\uffe5\011\uffe5" +
    "\015\uffe5\112\uffe5\001\002\000\016\002\uff5e\006\303\011" +
    "\uff5e\012\u0160\015\uff5e\112\uff5e\001\002\000\004\055\302" +
    "\001\002\000\004\013\u0162\001\002\000\012\002\uffe4\011" +
    "\uffe4\015\uffe4\112\uffe4\001\002\000\004\055\u0164\001\002" +
    "\000\004\110\u0165\001\002\000\004\055\302\001\002\000" +
    "\012\002\uffe6\011\uffe6\015\uffe6\112\uffe6\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\012\002\006\003\003\075\004\100\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\027\005\037\006\011\007" +
    "\020\010\013\011\016\013\024\014\010\015\033\020\026" +
    "\021\021\034\015\060\036\107\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\075\u014c\076\u014b" +
    "\077\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\062\041\110\047\111\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0121\001\001\000\002\001\001\000\004\025\242\001" +
    "\001\000\002\001\001\000\004\012\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\225\063\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\057\001\001\000\036\044\341\046\103\047" +
    "\076\050\105\051\073\053\074\054\072\055\065\056\077" +
    "\057\070\063\100\065\106\066\340\067\342\001\001\000" +
    "\004\073\061\001\001\000\034\044\066\046\103\047\076" +
    "\050\105\051\073\053\074\054\072\055\065\056\077\057" +
    "\070\063\100\065\106\103\337\001\001\000\004\074\062" +
    "\001\001\000\006\075\004\100\333\001\001\000\006\075" +
    "\004\100\064\001\001\000\034\044\066\046\103\047\076" +
    "\050\105\051\073\053\074\054\072\055\065\056\077\057" +
    "\070\063\100\065\106\103\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\044\306\046\314\047\313\050\105\051\311\053\074" +
    "\054\310\055\065\056\077\057\070\063\100\065\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\272\001\001\000\002\001\001\000\004" +
    "\065\263\001\001\000\002\001\001\000\010\027\161\075" +
    "\004\100\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\044\066\046\103\047\076\050\105\051\073\053" +
    "\074\054\072\055\065\056\077\057\070\063\100\065\106" +
    "\103\110\001\001\000\002\001\001\000\006\075\004\100" +
    "\113\001\001\000\002\001\001\000\032\044\114\046\103" +
    "\047\076\050\105\051\073\053\074\054\072\055\065\056" +
    "\077\057\070\063\100\065\106\001\001\000\002\001\001" +
    "\000\006\075\004\100\121\001\001\000\006\075\004\100" +
    "\117\001\001\000\032\044\120\046\103\047\076\050\105" +
    "\051\073\053\074\054\072\055\065\056\077\057\070\063" +
    "\100\065\106\001\001\000\002\001\001\000\032\044\122" +
    "\046\103\047\076\050\105\051\073\053\074\054\072\055" +
    "\065\056\077\057\070\063\100\065\106\001\001\000\002" +
    "\001\001\000\010\022\125\075\004\100\124\001\001\000" +
    "\010\023\131\024\134\105\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\044\130\046\103\047\076\050" +
    "\105\051\073\053\074\054\072\055\065\056\077\057\070" +
    "\063\100\065\106\001\001\000\002\001\001\000\006\075" +
    "\004\100\154\001\001\000\006\075\004\100\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\141" +
    "\001\001\000\006\042\144\043\145\001\001\000\002\001" +
    "\001\000\006\075\004\100\150\001\001\000\004\105\146" +
    "\001\001\000\002\001\001\000\006\075\004\100\147\001" +
    "\001\000\002\001\001\000\004\105\151\001\001\000\006" +
    "\075\004\100\152\001\001\000\032\044\153\046\103\047" +
    "\076\050\105\051\073\053\074\054\072\055\065\056\077" +
    "\057\070\063\100\065\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\004\100\156\001\001\000\006" +
    "\024\157\105\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\171\015\174\016\165" +
    "\017\166\030\163\031\173\032\167\033\170\060\176\001" +
    "\001\000\010\075\252\101\254\102\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\065\200\105\202\110\047\001\001\000\006\025\242" +
    "\065\241\001\001\000\002\001\001\000\004\025\225\001" +
    "\001\000\002\001\001\000\004\065\204\001\001\000\002" +
    "\001\001\000\006\024\206\105\132\001\001\000\002\001" +
    "\001\000\006\042\210\043\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\220" +
    "\043\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\222\043\145\001\001\000\002\001\001\000\006" +
    "\042\224\043\145\001\001\000\002\001\001\000\010\065" +
    "\226\075\004\100\227\001\001\000\002\001\001\000\006" +
    "\042\230\043\145\001\001\000\002\001\001\000\010\022" +
    "\232\075\004\100\124\001\001\000\002\001\001\000\006" +
    "\042\234\043\145\001\001\000\002\001\001\000\010\022" +
    "\236\075\004\100\124\001\001\000\002\001\001\000\006" +
    "\042\240\043\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\075\004\100\243\001\001\000\006\042\244" +
    "\043\145\001\001\000\002\001\001\000\010\022\246\075" +
    "\004\100\124\001\001\000\002\001\001\000\006\042\250" +
    "\043\145\001\001\000\002\001\001\000\004\075\261\001" +
    "\001\000\002\001\001\000\004\075\257\001\001\000\022" +
    "\013\171\015\174\016\165\017\166\031\256\032\167\033" +
    "\170\060\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\265\075\004" +
    "\100\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\044\270\046\103\047\076\050\105\051\073\053\074" +
    "\054\072\055\065\056\077\057\070\063\100\065\106\001" +
    "\001\000\002\001\001\000\034\044\273\046\103\047\076" +
    "\050\105\051\073\053\074\054\072\055\065\056\077\057" +
    "\070\063\100\065\106\071\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\044\277\046" +
    "\103\047\076\050\105\051\073\053\074\054\072\055\065" +
    "\056\077\057\070\063\100\065\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\044\326\046\103\047\076\050\105\051" +
    "\073\053\074\054\072\055\065\056\077\057\070\063\100" +
    "\065\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\044\332\046\103\047\076\050\105" +
    "\051\073\053\074\054\072\055\065\056\077\057\070\063" +
    "\100\065\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\335\075\004\100\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\044\344\046" +
    "\103\047\076\050\105\051\073\053\074\054\072\055\065" +
    "\056\077\057\070\063\100\065\106\001\001\000\002\001" +
    "\001\000\034\044\341\046\103\047\076\050\105\051\073" +
    "\053\074\054\072\055\065\056\077\057\070\063\100\065" +
    "\106\067\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\351\001\001\000\004\065\352\001\001\000" +
    "\002\001\001\000\010\022\354\075\004\100\124\001\001" +
    "\000\002\001\001\000\006\042\356\043\145\001\001\000" +
    "\002\001\001\000\006\075\004\100\360\001\001\000\002" +
    "\001\001\000\010\003\362\075\004\100\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\365\001\001" +
    "\000\006\075\004\100\366\001\001\000\006\042\367\043" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\374\001\001\000" +
    "\004\073\375\001\001\000\004\074\376\001\001\000\006" +
    "\075\004\100\377\001\001\000\002\001\001\000\010\027" +
    "\u0101\075\004\100\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u0104\001\001\000\006\075\004\100" +
    "\u0105\001\001\000\002\001\001\000\010\036\u0108\075\004" +
    "\100\u0107\001\001\000\014\035\u010e\037\u010b\040\u010c\041" +
    "\u010a\104\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\004\100\u011a\001\001\000\006" +
    "\075\004\100\u0117\001\001\000\002\001\001\000\006\075" +
    "\004\100\u0112\001\001\000\004\041\u0113\001\001\000\002" +
    "\001\001\000\004\106\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u0118\001\001\000\002\001\001" +
    "\000\006\075\004\100\u011d\001\001\000\004\104\u011b\001" +
    "\001\000\006\075\004\100\u011c\001\001\000\002\001\001" +
    "\000\012\037\u011e\040\u010c\041\u010a\104\u011f\001\001\000" +
    "\002\001\001\000\006\075\004\100\u0120\001\001\000\004" +
    "\041\u0113\001\001\000\006\075\004\100\u0122\001\001\000" +
    "\006\042\u0123\043\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u0126\001\001\000\006\075\004\100" +
    "\u0127\001\001\000\002\001\001\000\010\036\u0129\075\004" +
    "\100\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u012c\001\001\000\004\065\u012d\001\001\000\002" +
    "\001\001\000\010\022\u012f\075\004\100\124\001\001\000" +
    "\002\001\001\000\006\042\u0131\043\145\001\001\000\002" +
    "\001\001\000\006\112\u013b\113\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\075\004\100\u0136\001\001" +
    "\000\002\001\001\000\004\065\u0138\001\001\000\002\001" +
    "\001\000\032\044\u013a\046\103\047\076\050\105\051\073" +
    "\053\074\054\072\055\065\056\077\057\070\063\100\065" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\075\004\100\u0143\001\001\000\006\075\004" +
    "\100\u0142\001\001\000\002\001\001\000\004\113\u0144\001" +
    "\001\000\002\001\001\000\004\065\u0146\001\001\000\002" +
    "\001\001\000\006\075\004\100\u0148\001\001\000\032\044" +
    "\u0149\046\103\047\076\050\105\051\073\053\074\054\072" +
    "\055\065\056\077\057\070\063\100\065\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\u0150\006\011" +
    "\007\020\010\013\011\016\013\024\014\010\015\033\020" +
    "\026\021\021\034\015\060\036\107\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\u014f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\075\004\100\u0153\001\001\000\002\001\001\000\010\003" +
    "\u0155\075\004\100\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0159\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u015d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u0160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0165\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TypescriptDefParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TypescriptDefParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TypescriptDefParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PrintStream out = System.out;
	public PrintStream err = System.err;
	public CompilationUnit compilationUnit;
	public Stack<Token[]> comments = new Stack<Token[]>();

	protected static TypescriptDefParser createParser(File file) throws java.io.FileNotFoundException {
      TypescriptDefScanner scanner= new TypescriptDefScanner(new java.io.FileReader(file));
      scanner.setFileName(file.getPath());
      TypescriptDefParser parser= new TypescriptDefParser(scanner);
      parser.compilationUnit = new CompilationUnit(file);
      return parser;
	}

	public static TypescriptDefParser parseFile(File file) throws java.io.FileNotFoundException {
	  TypescriptDefParser parser= createParser(file);
      try {
    	parser.parse();
	  } catch(Exception e) {
	  	e.printStackTrace();
	  	parser.errors.add(new SyntaxError(null, "internal parser error"));
	  }
      return parser;
	}

	public List<SyntaxError> errors = new ArrayList<SyntaxError>();
	
    public void syntax_error(java_cup.runtime.Symbol current) {
      //errors.add(new SyntaxError("syntax error: '"+current.value + "' is not expected", at " + (current.left+1)+"("+(current.right+1)+")" );
      SyntaxError e = new SyntaxError((Token)current.value, "'"+current.value + "' is not expected");
      errors.add(e);
      System.err.println(e);
    }

    public void syntax_error(Token current) {
      SyntaxError e = new SyntaxError(current, "'"+current + "' is not expected");
      errors.add(e);
      System.err.println(e);
    }
  
    public void unrecovered_syntax_error(java_cup.runtime.Symbol current) {
	  System.err.println("unable to recover from previous error(s)... giving up!");
    }
  
  	public void printErrors(PrintStream out) {
		for (SyntaxError error : errors) {
			out.println(error.toString());
		}
	}

	public boolean hasErrors() {
		return !errors.isEmpty();
	}
  
  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TypescriptDefParser$actions {
  private final TypescriptDefParser parser;

  /** Constructor */
  CUP$TypescriptDefParser$actions(TypescriptDefParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TypescriptDefParser$do_action_part00000000(
    int                        CUP$TypescriptDefParser$act_num,
    java_cup.runtime.lr_parser CUP$TypescriptDefParser$parser,
    java.util.Stack            CUP$TypescriptDefParser$stack,
    int                        CUP$TypescriptDefParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TypescriptDefParser$result;

      /* select the action based on the action number */
      switch (CUP$TypescriptDefParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= comp_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		RESULT = start_val;
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TypescriptDefParser$parser.done_parsing();
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // comp_unit ::= declaration_list_opt 
            {
              Object RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 parser.compilationUnit.setDeclarations((Declaration[])decls); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("comp_unit",0, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list_opt ::= lf_opt declaration_list semi_or_lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 
		parser.comments.pop();
		RESULT = l; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",1, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list_opt ::= lf_opt 
            {
              Object RESULT =null;
		 RESULT = new Declaration[0]; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_list_opt",1, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= declaration_list semi_or_lf declaration_with_error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		if(d instanceof Declaration) {
			Declaration[] list = (Declaration[])l;
			Token doc = parser.comments.peek()[0];
			if(doc!=null) {
				((Declaration)d).setDocumentation(doc.toString());
				parser.comments.peek()[0]=null;
			}
			RESULT = ArrayUtils.add(list, (Declaration)d);
		} else {
			if(d instanceof Token) {
				parser.comments.peek()[0] = (Token)d;
			}
			RESULT = l;
		}
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= declaration_with_error 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
 		if(d instanceof Declaration) {
			parser.comments.push(new Token[] { null });
	 		RESULT = new Declaration[] { (Declaration)d }; 
	 	} else {
			parser.comments.push(new Token[] { (Token)d });
	 		RESULT = new Declaration[0]; 
	 	}
 	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_with_error ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_with_error",3, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_with_error ::= error 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_with_error",3, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= declaration_nodoc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= DOC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=d; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_nodoc ::= type_macro 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_nodoc ::= type_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_nodoc ::= enum_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_nodoc ::= module_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_nodoc ::= var_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_nodoc ::= func_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_nodoc ::= export_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_nodoc ::= import_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declaration_nodoc",5, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // export_decl ::= EXPORT ASSIGN IDENTIFIER lf_opt 
            {
              Object RESULT =null;
		int exportedIdentifierleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int exportedIdentifierright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object exportedIdentifier = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		RESULT = new ReferenceDeclaration((Token)exportedIdentifier, null, exportedIdentifier.toString());  
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_decl",14, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // export_decl ::= EXPORT LCPAREN export_element_list RCPAREN lf_opt 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_decl",14, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // export_element_list ::= export_element_list COMMA lf_opt export_element 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_element_list",72, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // export_element_list ::= export_element 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_element_list",72, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // export_element ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_element",73, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // export_element ::= IDENTIFIER AS IDENTIFIER 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_element",73, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // export_opt ::= EXPORT 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_opt",69, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // export_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("export_opt",69, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // import_decl ::= export_opt IMPORT import_spec 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT = s;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("import_decl",15, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // import_spec ::= MULT AS IDENTIFIER FROM qual_id 
            {
              Object RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object alias = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int importedleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int importedright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object imported = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT = new ReferenceDeclaration((Token)alias, alias.toString(), imported.toString());
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("import_spec",50, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // import_spec ::= IDENTIFIER ASSIGN qual_id 
            {
              Object RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object alias = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int importedleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int importedright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object imported = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT = new ReferenceDeclaration((Token)alias, alias.toString(), imported.toString());
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("import_spec",50, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // import_spec ::= IDENTIFIER ASSIGN IDENTIFIER LPAREN qual_id RPAREN 
            {
              Object RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object alias = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int requireleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int requireright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object require = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int importedleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int importedright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object imported = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		if(!"require".equals(require.toString())) {
			parser.syntax_error((Token)require);
		} else {
			RESULT = new ReferenceDeclaration((Token)alias, alias.toString(), imported.toString());
		}
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("import_spec",50, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_macro ::= TYPE_MACRO IDENTIFIER type_param_list_opt ASSIGN lf_opt type 
            {
              Object RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object alias = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT = new TypeMacroDeclaration((Token)alias, alias.toString(), (TypeParameterDeclaration[])tparams, (TypeReference)type);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_macro",6, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_macro ::= EXPORT TYPE_MACRO IDENTIFIER type_param_list_opt ASSIGN type 
            {
              Object RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object alias = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT = new TypeMacroDeclaration((Token)alias, alias.toString(), (TypeParameterDeclaration[])tparams, (TypeReference)type);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_macro",6, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_decl ::= declare_opt abstract_opt type_kind IDENTIFIER type_param_list_opt extends_opt implements_opt lf_opt LCPAREN member_list_opt RCPAREN 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object members = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		RESULT = new TypeDeclaration((Token)name,def.toString(),name.toString(),(TypeParameterDeclaration[])tparams,t==null?(TypeReference[])t2:ArrayUtils.addAll((TypeReference[])t,(TypeReference[])t2),(Declaration[])members);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_decl",7, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-10)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_decl ::= declare_opt DECLARE_CLASS IDENTIFIER type_param_list_opt extends_opt implements_opt lf_opt LCPAREN member_list_opt RCPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object members = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		RESULT = new TypeDeclaration((Token)name,"class",name.toString(),(TypeParameterDeclaration[])tparams,t==null?(TypeReference[])t2:ArrayUtils.addAll((TypeReference[])t,(TypeReference[])t2),(Declaration[])members);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_decl",7, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-9)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // const_opt ::= CONST 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("const_opt",48, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // const_opt ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("const_opt",48, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // abstract_opt ::= ABSTRACT 
            {
              Object RESULT =null;
		 RESULT = "abstract"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("abstract_opt",71, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // abstract_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("abstract_opt",71, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // enum_decl ::= declare_opt DECLARE_ENUM IDENTIFIER type_param_list_opt lf_opt LCPAREN enum_member_list_opt RCPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object members = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		RESULT = new TypeDeclaration((Token)name,"enum",name.toString(),(TypeParameterDeclaration[])tparams,null,(Declaration[])members);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_decl",26, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // enum_decl ::= declare_opt const_opt ENUM IDENTIFIER type_param_list_opt lf_opt LCPAREN enum_member_list_opt RCPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object members = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		RESULT = new TypeDeclaration((Token)name,"enum",name.toString(),(TypeParameterDeclaration[])tparams,null,(Declaration[])members);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_decl",26, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // enum_member_list_opt ::= lf_opt enum_member_list lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT = l; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list_opt",28, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // enum_member_list_opt ::= lf_opt 
            {
              Object RESULT =null;
		 RESULT = new Declaration[0]; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list_opt",28, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // enum_member_list ::= enum_member_list COMMA lf_opt enum_member_elt_with_error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		if(e!=null) {
			Declaration[] list = (Declaration[])l;
			RESULT = ArrayUtils.add(list, (Declaration)e);
		} else {
			RESULT=l;
		}
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list",27, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enum_member_list ::= enum_member_elt_with_error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		if(e!=null) {
			RESULT=new Declaration[] { (Declaration)e };
		} else {
			RESULT=new Declaration[0];
		} 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list",27, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // enum_member_list ::= enum_member_list COMMA lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		 
		RESULT=l;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list",27, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // enum_member_list ::= enum_member_list lf_opt doc_list lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		 
		RESULT=l;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list",27, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // enum_member_list ::= enum_member_list COMMA lf_opt doc_list lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		 
		RESULT=l;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_list",27, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // enum_member_elt_with_error ::= enum_member_elt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_elt_with_error",29, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // enum_member_elt_with_error ::= error 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_elt_with_error",29, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // enum_member_elt ::= doc_list lf_opt enum_member_elt_nodoc 
            {
              Object RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object doc = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		if(d!=null) {
			Declaration decl = (Declaration)d; 
			decl.setDocumentation(doc.toString()); 
			RESULT=d; 
		}
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_elt",30, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // enum_member_elt ::= enum_member_elt_nodoc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 	    
	 	RESULT=d; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_elt",30, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enum_member_elt_nodoc ::= IDENTIFIER 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT = new VariableDeclaration((Token)name, name.toString(), null, false, true);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_elt_nodoc",31, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // enum_member_elt_nodoc ::= IDENTIFIER ASSIGN literal 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		Literal literal = new Literal((Token)value, value.toString());
		VariableDeclaration var = new VariableDeclaration((Token)name, name.toString(), null, false, true);
		var.setInitializer(literal);
		RESULT = var;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("enum_member_elt_nodoc",31, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=i; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("literal",68, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_kind ::= INTERFACE 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=def; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_kind",8, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_kind ::= CLASS 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=def; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_kind",8, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // extends_opt ::= EXTENDS type_list 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("extends_opt",57, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // extends_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("extends_opt",57, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // implements_opt ::= IMPLEMENTS lf_opt type_list 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("implements_opt",58, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // implements_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("implements_opt",58, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_list ::= type_list COMMA lf_opt type 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		TypeReference[] list = (TypeReference[])l;
		RESULT = ArrayUtils.add(list, (TypeReference)t);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_list",65, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_list ::= type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=new TypeReference[] { (TypeReference)t }; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_list",65, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // member_list_opt ::= lf_opt member_list semi_or_comma_or_lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 
		parser.comments.pop();
		RESULT = l; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_list_opt",21, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // member_list_opt ::= lf_opt 
            {
              Object RESULT =null;
		 RESULT = new Declaration[0]; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_list_opt",21, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lf ::= lf LF 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("lf",59, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lf ::= LF 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("lf",59, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lf_opt ::= lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("lf_opt",62, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lf_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("lf_opt",62, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // semi_or_lf ::= SEMI lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_lf",60, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // semi_or_lf ::= SEMI 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_lf",60, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // semi_or_lf ::= lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_lf",60, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // semi_or_lf_opt ::= semi_or_lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_lf_opt",61, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // semi_or_lf_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_lf_opt",61, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // semi_or_comma_or_lf ::= SEMI lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf",63, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // semi_or_comma_or_lf ::= SEMI 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf",63, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // semi_or_comma_or_lf ::= COMMA lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf",63, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // semi_or_comma_or_lf ::= COMMA 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf",63, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // semi_or_comma_or_lf ::= lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf",63, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // semi_or_comma_or_lf_opt ::= semi_or_comma_or_lf 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf_opt",64, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // semi_or_comma_or_lf_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("semi_or_comma_or_lf_opt",64, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // member_list ::= member_list semi_or_comma_or_lf member_elt_with_error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		if(d instanceof Declaration) {
			Declaration[] list = (Declaration[])l;
			Token doc = parser.comments.peek()[0];
			if(doc!=null) {
				((Declaration)d).setDocumentation(doc.toString());
				parser.comments.peek()[0]=null;
			}
			RESULT = ArrayUtils.add(list, (Declaration)d);
		} else {
			if(d instanceof Token) {
				parser.comments.peek()[0] = (Token)d;
			}
			RESULT=l;
		}
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_list",22, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // member_list ::= member_elt_with_error 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
 		if(d instanceof Declaration) {
			parser.comments.push(new Token[] { null });
	 		RESULT = new Declaration[] { (Declaration)d }; 
	 	} else {
			parser.comments.push(new Token[] { (Token)d });
	 		RESULT = new Declaration[0]; 
	 	}
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_list",22, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // member_elt_with_error ::= member_elt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt_with_error",23, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // member_elt_with_error ::= error 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt_with_error",23, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // member_elt ::= member_elt_nodoc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=d; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt",24, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // member_elt ::= DOC 
            {
              Object RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object doc = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=doc; 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt",24, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // doc_list ::= DOC lf_opt doc_list 
            {
              Object RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object doc = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		 RESULT=doc; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("doc_list",66, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // doc_list ::= DOC lf_opt 
            {
              Object RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object doc = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=doc; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("doc_list",66, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // doc_opt ::= DOC 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("doc_opt",67, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // doc_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("doc_opt",67, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // member_elt_nodoc ::= var_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt_nodoc",25, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // member_elt_nodoc ::= func_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt_nodoc",25, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // member_elt_nodoc ::= index_sig_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt_nodoc",25, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // member_elt_nodoc ::= constructor_decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=d; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("member_elt_nodoc",25, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // module_decl ::= declare_opt IDENTIFIER qual_id lf_opt LCPAREN declaration_list_opt RCPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object declarations = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		if(!(t.toString().equals("module")||t.toString().equals("namespace"))) {
			parser.syntax_error((Token)t);
		}
		RESULT = ModuleDeclaration.createQualifiedModuleDeclaration((Token)t,name.toString(),(Declaration[])declarations);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("module_decl",10, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // module_decl ::= DECLARE_MODULE qual_id lf_opt LCPAREN declaration_list_opt RCPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object declarations = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		
		RESULT = ModuleDeclaration.createQualifiedModuleDeclaration((Token)t,name.toString(),(Declaration[])declarations);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("module_decl",10, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // var_or_const ::= VAR 
            {
              Object RESULT =null;
		 RESULT=false; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("var_or_const",70, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // var_or_const ::= CONST 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("var_or_const",70, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // var_decl ::= declare_opt var_or_const IDENTIFIER optional_opt lf_opt type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int readonlyleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int readonlyright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object readonly = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		VariableDeclaration var = new VariableDeclaration((Token)name,name.toString(),(TypeReference)t, (Boolean)opt, (Boolean)readonly);
		if(mod!=null) var.addModifier((String)mod);
		var.setHidden(var.hasModifier("private"));
		RESULT = var;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // var_decl ::= declare_opt IDENTIFIER optional_opt lf_opt type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		VariableDeclaration var = new VariableDeclaration((Token)name,name.toString(),(TypeReference)t, (Boolean)opt, false);
		if(mod!=null) var.addModifier((String)mod);
		var.setHidden(var.hasModifier("private"));
		RESULT = var;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // var_decl ::= declare_opt INT optional_opt lf_opt type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		VariableDeclaration var = new VariableDeclaration((Token)name,name.toString(),(TypeReference)t, (Boolean)opt, false);
		if(mod!=null) var.addModifier((String)mod);
		var.setHidden(var.hasModifier("private"));
		RESULT = var;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // var_decl ::= declare_opt NEW optional_opt lf_opt type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		VariableDeclaration var = new VariableDeclaration((Token)name,name.toString(),(TypeReference)t, (Boolean)opt, false);
		if(mod!=null) var.addModifier((String)mod);
		var.setHidden(var.hasModifier("private"));
		RESULT = var;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optional_opt ::= QUESTION 
            {
              Object RESULT =null;
		 RESULT=true; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("optional_opt",19, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // optional_opt ::= 
            {
              Object RESULT =null;
		 RESULT=false; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("optional_opt",19, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // func_decl ::= declare_opt IDENTIFIER optional_opt type_param_list_opt LPAREN param_list_opt RPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		//System.err.println("1");
		FunctionDeclaration func = new FunctionDeclaration((Token)name,name.toString(),(TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams);
		if(mod!=null) func.addModifier((String)mod);
		func.setHidden(func.hasModifier("private"));
		RESULT = func;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("func_decl",11, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // func_decl ::= declare_opt FUNCTION IDENTIFIER optional_opt type_param_list_opt LPAREN param_list_opt RPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		//System.err.println("2");
		FunctionDeclaration func = new FunctionDeclaration((Token)name,name.toString(),(TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams);
		if(mod!=null) func.addModifier((String)mod);
		func.setHidden(func.hasModifier("private"));
		RESULT = func;
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("func_decl",11, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-8)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // func_decl ::= DECLARE_FUNCTION IDENTIFIER optional_opt type_param_list_opt LPAREN param_list_opt RPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		//System.err.println("3");
		RESULT = new FunctionDeclaration((Token)name,name.toString(),(TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("func_decl",11, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // constructor_decl ::= declare_opt type_param_list_opt LPAREN param_list_opt RPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		//System.err.println("4");
		RESULT = new FunctionDeclaration((Token)token,FunctionDeclaration.ANONYMOUS_FUNCTION_RESERVED_NAME,(TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("constructor_decl",12, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constructor_decl ::= declare_opt NEW type_param_list_opt LPAREN param_list_opt RPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		//System.err.println("5");
		RESULT = new FunctionDeclaration((Token)token,FunctionDeclaration.NEW_FUNCTION_RESERVED_NAME,(TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("constructor_decl",12, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // index_sig_decl ::= declare_opt doc_opt LSPAREN IDENTIFIER type_annotation RSPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object paramName = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object paramType = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		// System.err.println("standard index====> " + paramName + ": " + paramType);
		ParameterDeclaration param = new ParameterDeclaration((Token) token, paramName.toString(), (TypeReference) paramType, false, false); 
		RESULT = new FunctionDeclaration((Token)token,FunctionDeclaration.INDEXSIG_RESERVED_NAME,
		    (TypeReference)t, new ParameterDeclaration[] { param }, (TypeParameterDeclaration[])null);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("index_sig_decl",13, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // index_sig_decl ::= declare_opt doc_opt LSPAREN IDENTIFIER DOT IDENTIFIER RSPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object prefix = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		// System.err.println("index with symbol====> " + prefix + "." + name);
		ParameterDeclaration param = new ParameterDeclaration((Token) token,  name.toString(), new TypeReference((Token) prefix,  prefix.toString(), null), false, false); 
		RESULT = new FunctionDeclaration((Token)token,FunctionDeclaration.INDEXSIG_RESERVED_NAME,
		    (TypeReference)t, new ParameterDeclaration[] { param }, (TypeParameterDeclaration[])null);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("index_sig_decl",13, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // index_sig_decl ::= declare_opt doc_opt LSPAREN IDENTIFIER DOT IDENTIFIER RSPAREN LPAREN RPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)).value;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object prefix = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		System.err.println("Method with symbol (not implemented): " + prefix + "." + name );
		// TODO : implement in transpiler
//		RESULT = new FunctionDeclaration((Token)token,FunctionDeclaration.INDEXSIG_RESERVED_NAME,(TypeReference)t, new ParameterDeclaration[] {(ParameterDeclaration)param}, (TypeParameterDeclaration[])tparams);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("index_sig_decl",13, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-9)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // index_sig_decl ::= declare_opt CONST type_param_list_opt LSPAREN param RSPAREN type_annotation_opt 
            {
              Object RESULT =null;
		int readonlyleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int readonlyright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object readonly = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT = new FunctionDeclaration((Token)token,FunctionDeclaration.INDEXSIG_RESERVED_NAME,(TypeReference)t, new ParameterDeclaration[] {(ParameterDeclaration)param}, (TypeParameterDeclaration[])tparams);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("index_sig_decl",13, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // param_list_opt ::= lf_opt param_list lf_opt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT = l; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("param_list_opt",16, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // param_list_opt ::= lf_opt 
            {
              Object RESULT =null;
		 RESULT = new ParameterDeclaration[0]; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("param_list_opt",16, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // param_list ::= param_list lf_opt COMMA lf_opt param 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		ParameterDeclaration[] list = (ParameterDeclaration[])l;
		RESULT = ArrayUtils.add(list, (ParameterDeclaration)p);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // param_list ::= param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT=new ParameterDeclaration[] { (ParameterDeclaration)p };
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // param ::= doc_opt lf_opt varargs_opt IDENTIFIER optional_opt type_annotation_opt doc_opt lf_opt 
            {
              Object RESULT =null;
		int varargsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int varargsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object varargs = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		 
		RESULT = new ParameterDeclaration( (Token)i, i.toString(), (TypeReference)t, (Boolean)opt, varargs!=null); 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-7)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // varargs_opt ::= DOTDOTDOT 
            {
              Object RESULT =null;
		int varargsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int varargsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object varargs = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=varargs; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("varargs_opt",20, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // varargs_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("varargs_opt",20, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // type_annotation_opt ::= type_annotation 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_annotation_opt",32, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // type_annotation_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_annotation_opt",32, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // type_annotation ::= COL lf_opt doc_opt lf_opt type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_annotation",33, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // type ::= functional_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type ::= typeof_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // type ::= is_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // type ::= union_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type ::= intersection_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // type ::= object_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // type ::= array_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // type ::= simple_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // type ::= tuple_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // union_type ::= type TUBE lf_opt type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=new UnionTypeReference((Token)t, (TypeReference)t1, (TypeReference)t2); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("union_type",36, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // union_type ::= LPAREN union_type RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("union_type",36, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // intersection_type ::= type AND lf_opt type 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=new UnionTypeReference((Token)t, (TypeReference)t1, (TypeReference)t2, true); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("intersection_type",37, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // intersection_type ::= LPAREN intersection_type RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("intersection_type",37, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // simple_type ::= qual_id type_arg_list_opt 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=new TypeReference(null, (String)q, (TypeReference[])tparams); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("simple_type",41, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tuple_type ::= LSPAREN type_list RSPAREN 
            {
              Object RESULT =null;
		int typesleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=new TypeReference(null, "$tuple$", (TypeReference[])types); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("tuple_type",45, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // array_type ::= simple_type SQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=new ArrayTypeReference( null, (TypeReference)t); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("array_type",38, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // array_type ::= object_type SQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=new ArrayTypeReference( null, (TypeReference)t); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("array_type",38, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // array_type ::= tuple_type SQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=new ArrayTypeReference( null, (TypeReference)t); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("array_type",38, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // array_type ::= LPAREN functional_type RPAREN SQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		 RESULT=new ArrayTypeReference(null, (TypeReference)t); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("array_type",38, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // array_type ::= array_type SQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=new ArrayTypeReference(null, (TypeReference)t); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("array_type",38, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // array_type ::= LPAREN union_type RPAREN SQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		 RESULT=new ArrayTypeReference(null, (TypeReference)t); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("array_type",38, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // functional_type ::= type_param_list_opt LPAREN_FUNC param_list_opt RPAREN_FUNC IMPLIES type 
            {
              Object RESULT =null;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
	  	RESULT=new FunctionalTypeReference((Token)token, (TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams); 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("functional_type",39, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // functional_type ::= NEW type_param_list_opt LPAREN_FUNC param_list_opt RPAREN_FUNC IMPLIES type 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)).value;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=new FunctionalTypeReference((Token)i, true, (TypeReference)t, (ParameterDeclaration[])params, (TypeParameterDeclaration[])tparams); 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("functional_type",39, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-6)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // functional_type ::= LPAREN functional_type RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("functional_type",39, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // object_type ::= LCPAREN member_list_opt RCPAREN 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object members = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=new TypeReference((Token)token, (Declaration[])members); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("object_type",42, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // object_type ::= LPAREN object_type RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("object_type",42, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // typeof_type ::= TYPEOF qual_id 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 TypeReference t = new TypeReference(null, (String)name, null); t.setTypeOf(true); RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("typeof_type",43, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // typeof_type ::= LPAREN TYPEOF qual_id RPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 TypeReference t = new TypeReference(null, (String)name, null); t.setTypeOf(true); RESULT=t; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("typeof_type",43, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-3)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // is_type ::= IDENTIFIER IS type 
            {
              Object RESULT =null;
		 RESULT=new TypeReference(null, "boolean", null); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("is_type",44, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // is_type ::= LPAREN IDENTIFIER IS type RPAREN 
            {
              Object RESULT =null;
		 RESULT=new TypeReference(null, "boolean", null); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("is_type",44, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-4)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declare_opt ::= EXPORT 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declare_opt ::= DECLARE 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declare_opt ::= STATIC 
            {
              Object RESULT =null;
		 RESULT = "static"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declare_opt ::= PRIVATE 
            {
              Object RESULT =null;
		 RESULT = "private"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declare_opt ::= PROTECTED 
            {
              Object RESULT =null;
		 RESULT = "protected"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declare_opt ::= PRIVATE STATIC 
            {
              Object RESULT =null;
		 RESULT = "private static"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declare_opt ::= PROTECTED STATIC 
            {
              Object RESULT =null;
		 RESULT = "protected static"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declare_opt ::= PUBLIC 
            {
              Object RESULT =null;
		 RESULT = "public"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // declare_opt ::= PUBLIC STATIC 
            {
              Object RESULT =null;
		 RESULT = "public static"; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declare_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("declare_opt",46, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // qual_id ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=i.toString(); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("qual_id",49, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // qual_id ::= IDENTIFIER DOT qual_id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 RESULT=i.toString()+"."+q.toString(); 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("qual_id",49, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // type_arg_list_opt ::= LT type_arg_list GT 
            {
              Object RESULT =null;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT = tparams; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_arg_list_opt",54, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // type_arg_list_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_arg_list_opt",54, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // type_arg_list ::= type_arg_list COMMA type 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		TypeReference[] list = (TypeReference[])l;
		RESULT = ArrayUtils.add(list, (TypeReference)p);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_arg_list",55, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // type_arg_list ::= type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT=new TypeReference[] { (TypeReference)p };
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_arg_list",55, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // type_param_list_opt ::= LT type_param_list GT 
            {
              Object RESULT =null;
		int tparamsleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).left;
		int tparamsright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).right;
		Object tparams = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-1)).value;
		 RESULT = tparams; 
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_param_list_opt",51, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // type_param_list_opt ::= 
            {
              Object RESULT =null;

              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_param_list_opt",51, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // type_param_list ::= type_param_list COMMA type_param 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		TypeParameterDeclaration[] list = (TypeParameterDeclaration[])l;
		RESULT = ArrayUtils.add(list, (TypeParameterDeclaration)p);
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_param_list",52, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // type_param_list ::= type_param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		
		RESULT=new TypeParameterDeclaration[] { (TypeParameterDeclaration)p };
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_param_list",52, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // type_param ::= type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=new TypeParameterDeclaration(((TypeReference)t).getToken(), ((TypeReference)t).getName()); 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_param",53, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // type_param ::= type EXTENDS type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TypescriptDefParser$stack.peek()).value;
		 
		RESULT=new TypeParameterDeclaration(((TypeReference)t).getToken(), ((TypeReference)t).getName()); 
		((TypeParameterDeclaration)RESULT).setUpperBound((TypeReference)s); 
	
              CUP$TypescriptDefParser$result = parser.getSymbolFactory().newSymbol("type_param",53, ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.elementAt(CUP$TypescriptDefParser$top-2)), ((java_cup.runtime.Symbol)CUP$TypescriptDefParser$stack.peek()), RESULT);
            }
          return CUP$TypescriptDefParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TypescriptDefParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TypescriptDefParser$do_action(
    int                        CUP$TypescriptDefParser$act_num,
    java_cup.runtime.lr_parser CUP$TypescriptDefParser$parser,
    java.util.Stack            CUP$TypescriptDefParser$stack,
    int                        CUP$TypescriptDefParser$top)
    throws java.lang.Exception
    {
              return CUP$TypescriptDefParser$do_action_part00000000(
                               CUP$TypescriptDefParser$act_num,
                               CUP$TypescriptDefParser$parser,
                               CUP$TypescriptDefParser$stack,
                               CUP$TypescriptDefParser$top);
    }
}

}
