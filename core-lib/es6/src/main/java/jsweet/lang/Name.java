/* 
 * JSweet - http://www.jsweet.org
 * Copyright (C) 2015 CINCHEO SAS <renaud.pawlak@cincheo.fr>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jsweet.lang;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * This annotation allows the definition of a name that will be used for the
 * final generated code (rather than the Java name).
 * 
 * <p>
 * It can be used when the name of an element is not a valid Java identifier. By
 * convention, JSweet implements a built-in convention to save the use of @Name
 * annotations:
 * 
 * <ul>
 * <li>Convention: <code>Keyword</code> in Java transpiles to
 * <code>keyword</code>, when keyword is a Java keyword (such as catch, finally,
 * int, long, and so forth)</li>
 * </ul>
 * 
 * @author Renaud Pawlak
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PACKAGE })
@Documented
public @interface Name {

	/**
	 * The name that will be generated by the transpiler in place of the
	 * annotated element Java name.
	 */
	java.lang.String value();

}
